{"pages":[{"title":"Hello,world.","text":"","link":"/Hello-world/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"我已足够幸福，有梦可追，有梦可做！小小的我,有着大大的梦. 一切都会越来越好的, 一切都在向未来奔去, 愿你我各自努力,他日重逢,","link":"/about/index.html"},{"title":"friend","text":"","link":"/friend/index.html"},{"title":"home","text":"","link":"/home/index.html"},{"title":"归档","text":"","link":"/archives/index.html"},{"title":"","text":"你可以成为你想成为的人！ 及时止损，立即止损。 直面问题，解决问题。 不要在乎别人怎么想，不寻求认同感。 冥想。 跑步。 定期复盘。 减少被动信息摄入。 知行合一。 面对现实，不要逃避现实。 对错误反思总结。 坚定的从头到尾执行方案。 让别人评估你的进度。 头脑开放。 事事有回落。先利己，后利他。","link":"/plan/index.html"},{"title":"","text":"碎碎念 Don't forget!","link":"/self-talking/index.html"},{"title":"","text":"Bookmarks Bookmarks 博客 Python基础 - 廖雪峰的官方网站 保罗的小宇宙 实用网站推荐！你一定会用上！ - Ray's Blog - RAYCODER.ME 想法 - 猫梨の部屋 阮一峰的网络日志 蝉時雨 | 蝉鸣如雨 花宵道中 -陈泽辉 About Me | 宇宙湾 震惊！NLP 顶级赛事 SemEval 那个人居然夺得榜首 关于可爱的 DIYgod | Hi, DIYgod See you in BUPT | See_you_in_BUPT ningzimu/See_you_in_BUPT: 北京邮电大学计算机考研信息汇总 2019 年终总结：新生活、新探索 | 静觅 MingruiYu - 博客园 #0000：Talk is cheap,Show me the code. – 远在上海 猿人学Python - 教你挣钱的Python教程网站 lxw的大数据田地Hadoop/Hive/HBase/Spark/Java 钦念 - 博客园 见字如面 - 抽离自我，冷眼旁观 过往记忆 奇舞周刊 AlloyTeam|腾讯全端 AlloyTeam 团队 淘系前端团队 JDC | 京东设计中心 当然我在扯淡 ZJBLOG —— zj的个人博客 Jadmin的个人博客 | 一个努力成长中的Java后端程序猿 刘未鹏 | Mind Hacks – 思维改变生活 (1条消息) 优秀有价值的博客收藏列表（持续更新）_曹胜欢-CSDN博客 Matrix67: The Aha Moments 罗辑思维 第36集 大家都有拖延症 36-资讯-高清完整正版视频在线观看-优酷 GeekPlux 做爱做的事，看有趣的人 (4条消息) 刘未鹏|C++的罗浮宫_pongba_CSDN博客-C++,片面思考,杂感|生活领域博主 保罗·格雷厄姆 gaclib.net - C++博客 首页 - 老赵点滴 - 追求编程之美 I'm TualatriX OneV's Den Dandy's Blog 林夕水共 不要说话哦 - 全民K歌 归档 | TangShusen idealclover GoodThingList/GoodBlogList.md at master · cnfeat/GoodThingList 优秀个人独立博客推荐名单 – 土木坛子 We Study Billionaires - The Investor's Podcast Network About - 李理的博客 爱影博客 - 生命不息，奋斗不止 www.lylyl.cn 云风的 BLOG 4G Spaces The Big Picture - Macro Perspective on the Capital Markets, Economy, Geopolitics, Technology, and Digital Media 月光博客-关注互联网和搜索引擎的IT科技博客 WNJXYKのBlog – 没有退路 // 唯有一往无前 前端 Zou-Wang / CNblogs-Theme-Sakura：基于Sakura美化的博客园样式 Iconfont-阿里巴巴矢量图标库 在线代码格式化 今日诗词 - 一言API - 诗词实时智能推荐 - 今日诗词开放接口 - 今日诗词 API 免费素材照片 · Pexels 极简壁纸_海量电脑桌面壁纸美图_4K超高清_最潮壁纸网站 Awesome Wallpapers - wallhaven.cc 1392您的名字高清壁纸|墙纸 背景图片-Wallpaper Abyss-页面5 模板制作快速入门 - Typecho Docs 储存库 10 学校网课 首页 计算机网络谢希仁第七版网课_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 清华大学 JAVA 自主学习教程 （推荐1.25倍数食用）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 学堂在线-精品中文慕课(mooc)平台 腾讯课堂 云班课 - 我的班课 教学管理系统 工具 FreeV2ray (30 条消息) 你极力推荐的 Chrome 扩展有哪些？ - 知乎 Quora-分享知识和更好地了解世界的地方 字典对象 — Python 3.7.7 文档 Shimmer (shimmer) - 路过图床 正在播放: 青春不打烊（JOKER 2018Mix ） - 王梓钰,音阙诗听 碎碎念 百度学术 - 保持学习的态度 封神台 - 掌控安全在线演练靶场，是一个在线黑客攻防演练平台。 ASCII编码对照表_911查询 站长工具 - 站长之家 ShowDoc 【GitMind官网】- 免费在线思维导图软件 在线工具 - 程序员的工具箱 Inspect Traffic | Progress Telerik Fiddler Everywhere The Best IP Address, Email and Networking Tools - IPAddress.com 在线翻译_有道 计算机 - PDF之家-免费高清PDF电子书下载 腾讯文档 Gridea | 一个静态博客写作客户端 Text to ASCII Art Generator (TAAG) Add Font 100font.com - 免版权字体下载、免费商用字体下载网站 彩虹屁生成器 | chp.shadiao.app 用Chrome学编程 Trending repositories on GitHub today Apache软件基金会 在线文字半角转全角，全角转半角，英文标点转中文、中文标点转英文--查错网 掘金 Shimmer · 语雀 看云 | 专注文档在线创作、阅读、分享和托管 Web of Science [v.5.35] - 所有数据库 基本检索 中国国家图书馆•中国国家数字图书馆 免费logo在线制作 抠图_在线抠图软件_证件照换底色-稿定设计 iLoveIMG 在线修改图像。 CodePen：在线代码编辑器和前端Web开发人员社区 首页 — 猫熊网络加速器 aries15/freess: 免费机场 wantToDoSomeThing/ssSSRV2rayClashTrojan: 科学上网，ss, ssr, v2ray, trojan, clash, clashr，翻墙机场推荐 navicat-keygen: A keygen for Navicat - Gitee.com 首页 - Auto.js 女巫2020_HD中字在线播放-片库 首页 — FASTLINK 免费在线文字识别，文字提取，OCR服务－OCRMaker RGB颜色值与十六进制颜色码转换工具 Initial page - Shimmerの笔记 在线随机密码生成器 - 密码工具箱 - 脚本之家在线工具 Pinterest 电子书世界 - 为阅读而生 计算机电子书下载网-编程pdf电子书下载-码农之家 Criminal Minds S03 COMPLETE / 犯罪心理 第三季全季 Criminal.Minds.S03.720p.WEB-DL.DD5.1.h.264-EbP 简体 字幕下载 - SubHD 配置文件 | PicGo-Core DownGit 奶牛快传 | 传文件 文件下载不限速 小宇宙 AKShare 专题教程 — AKShare 1.0.0 文档 JSON Online Validator and Formatter - JSON Lint Bajins 片库 - 全网高清影视聚合下载 文献 PubsOnLine arXiv.org e-Print archive Frontiers | Peer Reviewed Articles - Open Access Journals About Us 自由的百科全书 2021 - ZHZ.wiki 小屋 Shimmer 博客园 - 开发者的网上家园 cskaoyan 中国研究生招生信息网 北京工业大学研究生招生网 英语词缀大全 2020考研计算机有感（已上岸） - X_Jun - 博客园 中科大软件学院 2021计算机考研有感（已上岸） - KillerAery - 博客园 【新提醒】2020双非二战上岸科软复盘与经验分享（3个月复习408专业课） - 中国科学技术大学 - 王道论坛,专注于计算机考研的点点滴滴！ - Powered by Discuz! 考研百科 解锁考研困惑_中国研究生招生信息网 北京工业大学研究生招生网 书单 『只读经典』思考的技术与艺术（原“学会思考”） 『只读经典』判断与决策 『只读经典』思维改变生活（原“心理学改变生活”） 机器学习与人工智能","link":"/bookmarks/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"VMware16安装_Ubuntu","text":"第一节 VMware16安装Step1：下载VMware Workstation Pro要安装VMware，请首先在系统上下载二进制软件包。在VMware官方网站上找到最新的稳定版本。 1.打开一个Web浏览器，转到VMware的官方网站，然后按照以下路径导航到 Try VMware Workstation Pro page by following the path: Products &gt; Workstation Pro &gt; Try VMware Workstation Pro 2.由于要在Ubuntu上进行安装，请找到适用于Linux的安装软件，然后单击DOWNLOAD NOW。 Step2：安装先决条件GNU Compiler Collection和Build Essential是安装VMware Workstation所需的软件先决条件。 如果您的系统上没有它，请执行以下步骤安装它们： 1.右键单击窗口，然后选择“在终端中打开”，从“下载”文件夹中打开终端。 2.在安装任何软件之前，请确保使用以下命令更新软件包存储库： 1sudo apt update 3.然后，安装必备组件GNU Compiler Collection和Build Essential，这些必备组件将在安装过程中使用。运行命令： 1sudo apt install gcc build-essential 按y确认安装，然后按Enter。 Step3：提取VMware Installer在继续进行正式安装过程之前，在终端提取下载的.bundle文件。 1.在终端中打开下载的bundle文件目录,并为其添加可执行权限： 1sudo chmod +x VMware-Player-16.1.1-17801498.x86_64.bundle 复制完整的文件名，下一步将需要它。 2.接下来，通过键入命令sudo ./+完整的文件名来提取文件。 命令输出将是： 3.提取完文件后，它将自动打开一个新窗口，即VMware Workstation Installer。 Step4：安装VMware Workstation1.启动VMware Workstation Installer后，通过选择配置首选项并单击“下一步”来完成这些步骤。 2.完成安装后，它将显示“安装已成功”通知。 3.通过在Ubuntu Dash中键入名称搜索WMware。通过单击图标即可打开虚拟化软件。 4.在登陆VMware Workstation的 主窗口之前，它将要求您： 输入许可证密钥 免费试用30天。 1234567Serial keys: ZF3R0-FHED2-M80TY-8QYGC-NPKYFYF390-0HF8P-M81RQ-2DXQE-M2UT6ZF71R-DMX85-08DQY-8YMNC-PPHV8AZ3E8-DCD8J-0842Z-N6NZE-XPKYFFC11K-00DE0-0800Z-04Z5E-MC8T6(version for 16pro) 5.输入上述密钥之一后，即可打开VMware 开始体验。 截至目前，VMware已经安装完成，Centos镜像的安装请查看下一节","link":"/2020/05/08/1/"},{"title":"scala安装","text":"第十节 scala安装 安装 123cd /usr/app/wget https://downloads.lightbend.com/scala/2.11.11/scala-2.11.11.tgztar -zxvf scala-2.11.11.tgz 配置环境变量 1234567vi /etc/profile#添加以下内容export Scala_HOME=scala-2.11.11export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin:$HIVE_HOME/bin:$Flume_HOME/bin:$Scala_HOME/bin#刷新配置文件source /etc/profile 检测 scala 版本 12cd /usr/appscala -version 检测 scala 的客户端 12scala scala&gt; print(&quot;Hello Scala&quot;)","link":"/2020/05/08/10/"},{"title":"spark安装","text":"第十一节spark安装 安装 123cd /usr/appwget https://archive.apache.org/dist/spark/spark-2.0.0/spark-2.0.0-bin-hadoop2.7.tgztar -zxvf spark-2.0.0-bin-hadoop2.7.tgz spark-2.0.0-bin-hadoop2.7 添加环境变量 12345vi /etc/profile# 添加以下内容export Spark_HOME=/usr/app/spark-2.0.0-bin-hadoop2.7export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin:$HIVE_HOME/bin:$Flume_HOME/bin:$Spark_HOME/bin:$Scala_HOME/bin 配置./conf/slaves 12345678/usr/app/spark-2.0.0-bin-hadoop2.7/conf/# 首先将 slaves.template 拷贝一份cp -r slaves.template slaves# 修改 slaves 文件,添加hadoop11hadoop12hadoop13 配置./conf/spark-env.sh 123456789#将 spark-env.sh. template 拷贝一份cp -r spark-env.sh.template spark-env.shvi /conf/spark-env.sh#添加以下内容export JAVA_HOME=/usr/app/jdk1.8.0_77export Scala_HOME=scala-2.11.11export SPARK_MASTER_IP=hadoop11export SPARK_WORKER_MEMORY=2gexport MASTER=spark://hadoop11:7077 将 spark-2.0.0-bin-hadoop2.7 文件夹拷贝到另外两个结点 12scp -r /usr/app/spark-2.0.0-bin-hadoop2.7 root@hadoop12:/usr/appscp -r /usr/app/spark-2.0.0-bin-hadoop2.7 root@hadoop13:/usr/app 编辑其余两台的环境变量 12export Spark_HOME=/usr/app/spark-2.0.0-bin-hadoop2.7export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin:$Spark_HOME/bin:$S 启动 12/usr/app/spark-2.0.0-bin-hadoop2.7/sbin/start-all.sh #启动Spark集群/usr/app/spark-2.0.0-bin-hadoop2.7/bin/spark-shell #启动spark-shell","link":"/2020/05/08/11/"},{"title":"Centos7 安装","text":"第二节 Centos7 安装CentOS是基于Red Hat Enterprise Linux（RHEL）的开源Linux发行版。由于CentOS 7的稳定性和活跃的开发人员社区，它被视为Web托管的首选选项。 在本教程中，通过几个简单的步骤学习如何安装CentOS 7。 Prerequisites 建议最少10GB的可用磁盘空间 CentOS 7 ISO安装文件 Step1：下载CentOS 7要下载官方和最新的CentOS 7 ISO文件，请浏览至阿里云镜像。 建议Minimal-2009.iso 即可 Step2：配置CentOS 7镜像 打开Vmware ，点击左上角File选择New Virtual Machine 选择 Typical ,继续Next 选择 Use ISO image ,然后找到下载好的镜像文件，Next. Guest Operating System 选择Linux,Next. 选择虚拟机存放的位置（完整的集群环境需约15G的空间）,Next. 分配15G的磁盘空间，Next. FInsh. close. Step3：启动CentOS ISO镜像 开始安装过程。为此，请选择Install CentOS 7。 选择语言 中文，继续。 点击安装目标位置，默认即可 设置网络和主机名 设置主机名后，点击配置 点击VMware 左上角的Edit 选择 Virtual Network editor. 查看NAT设置中相应的IPV4地址及网关 在IPV4设置中，方法选择手动，将刚才记录的数据填入相应的虚拟机设置中，IP地址保持前三段数字相同，末尾段自定义。 设置root账号和自定义用户，Root用户仅需设置密码，然后点击创建用户，将用户名设为Hadoop，选择“将此用户做为管理员” 软件安装，选择最小安装。 等待安装完成（需要较长时间），点击重启 登录系统 输入对应的用户名与密码进入系统。 至此，centos7虚拟机安装完成。 下节Hadoop2.7 安装","link":"/2020/05/08/2/"},{"title":"Hadoop2.7 安装","text":"第三节 Hadoop2.7 安装 介绍Step1: 配置远程登录由于我们没有安装桌面环境，虚拟机中Centos的终端相对简陋，我们在宿主机终端通过SSH登录Centos即可.（主机系统为Ubuntu ，我们不需要下载其他的远程连接工具） 将服务器IP设为静态 打开网络配置文件，命令如下 1sudo vi /etc/sysconfig/network-scripts/ifcfg-ens33 用如下内容替换文件中的内容，将注释内容更改为自己服务器相应的。 12345678TYPE=&quot;Ethernet&quot;BOOTPROTO=&quot;static&quot;DEVICE=&quot;ens33&quot;ONBOOT=&quot;yes&quot;IPADDR=192.168.200.101 #IPNETMASK=255.255.255.0 #子网掩码GATEWAY=192.168.200.2 #网关DNS1=114.114.114.114 重启网络 1sudo service network restart 在宿主机hosts文件中添加相应服务器的域名映射. 1sudo gedit /etc/hosts 测试SSH登录 1sudo ssh hadoop14 更改主机名 1sudo vi /etc/hostname # 修改为master Step2: 安装JDK Hadoop支持Openjdk ，因此我们可用使用命令 安装openjdk7，替代Oracle JDK。 1su -c &quot;yum install java-1.7.0-openjdk&quot; 查看Java版本 1java -version 配置Java环境变量 123sudo vi /etc/profile# javaexport JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.261-2.6.22.2.el7_8.x86_64 Step3: 安装Hadoop2.7.3 新建资源目录 12sudo mkdir /opt/softwares sudo mkdir /opt/modules 安装wget 1yum install wget 下载hadoop2.7.3 ，速度较慢 推荐使用百度网盘下载到本地后，使用scp命令上传到服务器 链接: https://pan.baidu.com/s/1W_S5BcghFqjwdUi0GfqeSQ 密码: p2ek 123wget https://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/hadoop-2.7.3.tar.gz #在线下载sudo scp -r hadoop-2.7.3.tar.gz hadoop14:/opt/softwares/ #本地上传 解压hadoop,转到hadoop文件夹下，执行以下命令。 1tar -xvf hadoop-2.7.3.tar.gz 关闭防火墙 由于hadoop需要打开的端口太多，因此此处暂时关闭了防火墙。要关闭防火墙，必须在root用户下使用以下命令： 1234#Close the firewallsystemctl stop firewalld.service#Turn off boot and self-startsystemctl disable firewalld.service 创建数据存储目录 123cd /usr/local/hadoopmkdir tmpmkdir -p hdfs/data hdfs/name 配置环境变量 12345678910111213141516171819202122 sudo vi /etc/profile export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.261-2.6.22.2.el7_8.x86_64 export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar export HADOOP_HOME=/opt/softwares/hadoop export HADOOP_INSTALL=$HADOOP_HOME export HADOOP_MAPRED_HOME=$HADOOP_HOME export HADOOP_COMMON_HOME=$HADOOP_HOME export HADOOP_HDFS_HOME=$HADOOP_HOME export YARN_HOME=$HADOOP_HOME export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin使用以下命令初始化变量。 source /etc/profile完成后，您现在可以检查是否设置了环境变量。运行以下命令。 echo $JAVA_HOME它应该提供以下输出。 /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.261-2.6.22.2.el7_8.x86_64同时运行以下命令。 echo $HADOOP_HOME它应该显示以下输出。 /opt/softwares/hadoop 配置,进入hadoop目录下 1 修改core-site.xml文件 123456789101112131415&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://master:9000&lt;/value&gt; # &lt;/property&gt; &lt;property&gt; &lt;name&gt;io.file.buffer.size&lt;/name&gt; &lt;value&gt;131072&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;file:/home/hadoop/tmp&lt;/value&gt; # &lt;description&gt;Abase for other temporary directories.&lt;/description&gt; &lt;/property&gt;&lt;/configuration&gt; 2 修改hdfs-site.xml文件 123456789101112131415161718192021222324&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt; &lt;value&gt;linux-node1:9001&lt;/value&gt; &lt;description&gt;# View HDFS status &lt;/description&gt; through the web interface &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;file:/home/hadoop/dfs/name&lt;/value&gt; # &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;file:/home/hadoop/dfs/data&lt;/value&gt; # &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;2&lt;/value&gt; &lt;description&gt;# Each Block has two backups &lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 3 修改mapred-site.xml (重命名mapred-site.xml.template并添加以下内容) (这是MapReduce任务的配置。因为Hadoop 2.x使用yarn框架来实现分布式部署，所以必须在mapreduce.framework.name属性下配置yarn。mapred.map.tasks和mapred.reduce.tasks分别是map和reduce的任务数。) 1mv mapred-site.xml.template mapred-site.xml 1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt; &lt;value&gt;master:10020&lt;/value&gt; # &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt; &lt;value&gt;master:19888&lt;/value&gt; # &lt;/property&gt;&lt;/configuration&gt; 4 配置节点yarn-site.xml 1234567891011121314151617181920212223242526272829303132333435&lt;configuration&gt; &lt;!-- Site specific YARN configuration properties --&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt; &lt;value&gt;master:8032&lt;/value&gt; # &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt; &lt;value&gt;master:8030&lt;/value&gt; # &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt; &lt;value&gt;master:8031&lt;/value&gt; # &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt; &lt;value&gt;master:8033&lt;/value&gt; # &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt; &lt;value&gt;master:8088&lt;/value&gt; # &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt; &lt;value&gt;8192&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 5 配置hadoop环境变量 123456[root@master ~]$ vi /etc/profile#Replace the previously modified java environment variable.export JAVA_HOME=java-1.7.0-openjdk-1.7.0.261-2.6.22.2.el7_8.x86_64export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport HADOOP_HOME=/usr/local/hadoopexport PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin 12345[hadoop@master ~]$ vi ~/.bashrcexport JAVA_HOME=java-1.7.0-openjdk-1.7.0.261-2.6.22.2.el7_8.x86_64export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport HADOOP_HOME=/usr/local/hadoopexport PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin Step4:克隆虚拟机 克隆Hadoop02，Hadoop03节点。 关闭虚拟机master，然后在VMware左侧的虚拟机列表中右键单击【Hadoop01】，选择【Manager】-&gt;【Clone】 点击下一步,在Clone Type处选择Create a full clone 修改虚拟机名称与文件路径，点击完成，等待克隆完成 克隆Hadoop03的步骤同上 修改节点主机名 首先修改Hadoop02和Hadoop03的主机名（他们目前都是master） 123vi /etc/hostnames# Hadoop02修改为slave1# Hadoop03修改为slave2 修改IP 1234sudo vi /etc/sysconfig/network-scripts/ifcfg-ens33# 修改Hadoop02的IP为192.168.200.102# 修改Hadoop03的IP为192.168.200.103sudo service network restart #重启网络 添加域名解析 123456789分别修改Hadoop01,Hadoop02,Hadoop03,及宿主机的域名映射文件sudo vi /etc/hosts# 在host文件末尾追加以下内容：# 192.168.200.101 master# 192.168.200.102 slave1# 192.168.200.103 slave2 在各节点使用ping命令检查是否配置成功： 123ping masterping slave1ping slave2 Step5：配置ssh免密登录 生成密钥文件： 123ssh-keygen -t rsa# 生成中按enter即可# 在三台服务器中执行此命令 SSH分发 12345ssh-copy-id masterssh-copy-id slave1ssh-copy-id slave2# 在三台服务器中执行上述命令#Are you sure you want to continue connecting (yes/no)? 需输入yes 验证SSH登录 1234ssh masterssh slave1ssh slave2#三台机器中分别执行上述命令 格式化一个新的分布式文件系统： 12345hadoop namenode -format#在第一使用 Hadoop 之前，需要先格式化#在master上,执行上述命令#显示 tmp/dfs/name has been successfully formatted #及Exiting with status 0 表明格式化成功 Step6： 启动Hadoop123#在master上执行cd /usr/app/hadoop-2.7.3/sbin/./start-all.sh jps查看各节点启动进程 Step7： 集群web123Hadoop集群启动并运行后，可以通过web-ui进行集群查看，如下所述：然后本机访问http://(Hadoop01 IP):50070 #hdfshttp://(Hadoop01 IP):8088 #yarn Step8：验证 验证 HDFS HA 首先向 hdfs 上传一个文件 12hadoop fs -put /etc/profile /hadoop fs -ls / 通过浏览器访问:http://192.168.200.11:50070 验证 YARN 运行一下 hadoop 提供的 demo 中的 WordCount 程序: 1hadoop jar /usr/app/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /profile /out 至此，hadoop安装完成 下节Zookeeper安装","link":"/2020/05/08/3/"},{"title":"Zookeeper安装","text":"第四节 Zookeeper安装zookeeper 安装 下载zookeeper 12cd /usr/appwget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.8/zookeeper-3.4.8.tar.gz 解压 1tar -zxvf zookeeper-3.4.8.tar.gz 配置(先在一台节点上配置) 添加一个 zoo.cfg 配置文件 12cd zookeeper-3.4.8/conf/cp -r zoo_sample.cfg zoo.cfg 修改配置文件(zoo.cfg) 12# 建立/usr/app/zookeeper-3.4.8/data 目录,mkdir /usr/app/zookeeper-3.4.8/data 配置 zoo.cfg 12345dataDir=/usr/app/zookeeper-3.4.8/data #在最后一行添加server.1=hadoop11:2888:3888server.2=hadoop12:2888:3888server.3=hadoop13:2888:3888 创建一个 myid 文件, 12345cd /usr/app/zookeeper-3.4.8/datatouch myidvi myidecho &quot;1&quot; &gt;myid#里面内容是 server.N 中的 N(server.2 里面内容为 2) 拷贝 123456# 将配置好的 zk 拷贝到其他节点scp -r /usr/app/zookeeper-3.4.8/root@hadoop12:/usr/appscp -r /usr/app/zookeeper-3.4.8/root@hadoop13:/usr/app# 注意:在其他节点上一定要修改 myid 的内容# 在 hadoop12 应该讲 myid 的内容改为 2 (echo &quot;2&quot; &gt;myid)# 在 hadoop13 应该讲 myid 的内容改为 3 (echo &quot;3&quot; &gt;myid) 启动集群 1234# Zookeeper 启动及关闭命令/usr/app/zookeeper-3.4.8/bin/./zkServer.sh start/usr/app/zookeeper-3.4.8/bin/./zkServer.sh stop# 选出 leader 和 follower, 12#查看启动状态查看命令/usr/app/zookeeper-3.4.8/bin/./zkServer.sh status 至此，Zookeeper安装完成 下节Hbase安装","link":"/2020/05/08/4/"},{"title":"Hbase安装","text":"第五节 Hbase安装主节点安装 hbase 安装 hbase 12cd /usr/app wget https://archive.apache.org/dist/hbase/1.2.6/hbase-1.2.6-bin.tar.gz 解压 1tar –zxvf hbase-1.2.6-bin.tar.gz 配置 hbase 集群 把 hadoop 的 hdfs-site.xml 和 core-site.xml 放到 hbase/conf 修改 环境变量 12345Vi /etc/profileexport JAVA_HOME=/usr/app/jdk1.8.0_77export HADOOP_HOME=/usr/app/hadoop-2.7.3export HBASE_HOME=/usr/app/hbase-1.2.6export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin# 注意:source /etc/profile (刷新环境变量配置文件) 1234# 修改 hbase-env.sh /usr/app/hbase-1.2.6/conf/export JAVA_HOME= /usr/app/jdk1.8.0_77# hbase 使用外部的 zk,hbase自带的zk只可用于伪分布式export HBASE_MANAGES_ZK=false 修改 hbase-site.xml 配置 1vim hbase-site.xml 123456789101112131415161718192021&lt;configuration&gt;&lt;!-- 指定 hbase 在 HDFS 上存储的路径 --&gt;&lt;property&gt;&lt;name&gt;hbase.rootdir&lt;/name&gt;&lt;value&gt;hdfs://ns1/hbase&lt;/value&gt;&lt;/property&gt;&lt;!-- 指定 hbase 是分布式的 --&gt;&lt;property&gt;&lt;name&gt;hbase.cluster.distributed&lt;/name&gt;&lt;value&gt;true&lt;/value&gt;&lt;property&gt;&lt;name&gt;hbase.master.info.port&lt;/name&gt;&lt;value&gt;60010&lt;/value&gt;&lt;/property&gt;&lt;/property&gt;&lt;!-- 指定 zk 的地址,多个用“,”分割 --&gt;&lt;property&gt;&lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;&lt;value&gt;hadoop11:2181,hadoop12:2181,hadoop13:2181&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt; 增加 slave 的集群 1Vim /usr/app/hbase-1.2.6/conf/regionservers 1234# (部署到 datanode 上面,那一台启动 hbase 那一台就是 master) hadoop11 hadoop12 hadoop13 拷贝 hbase 到其他节点 12scp -r /usr/app/hbase-1.2.6 root@hadoop12:/usr/app/scp -r /usr/app/hbase-1.2.6 root@hadoop13:/usr/app/ 启动所有的 hbase 1234567# 前提需要:Zookeeper 和 Hdfs 启动# 分别启动 zk./zkServer.sh start# 启动 hbase 集群start-dfs.sh# 启动 hbase,在主节点上运行:/usr/app/hbase-1.2.6/bin/start-hbase.sh 通过浏览器访问 hbase 管理页面 1http://192.168.200.11:16010/master-status 为保证集群的可靠性,要启动多个 HMaster 1hbase-daemon.sh start master HBase Shell命令行操作 启动HBase Shell 1bin/hbase shell 创建表，需要创建表明，另外需要指定列簇(column family)。表名和列簇名都需要使用引号括起来。 1create 'test','f1' 向表中加入数据。这里使用关键字put。 1put 'test',1,'f1:id',100 删除表。连表也删除掉，使用关键字drop，但是不能直接drop，在drop之前需要先disable。 disable 'test' drop 'test' 至此，Hbase安装完成 下节MYSQL安装","link":"/2020/05/08/5/"},{"title":"主节点安装 MySql","text":"第六节 主节点安装 MySql 安装 mysql 服务器命令如下: 1yum install mysql-server 设置开机启动命令如下: 1chkconfig mysqld on 启动 mysql 服务命令如下: 123service mysqld start#根据提示设置 root 的初试密码命令：mysqladmin -u root password 123456 进入 mysql 命令行命令如下: 123mysql -uroot –p#输入密码 123456 在 Mysql 中执行这四步: 1234create database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database amon DEFAULT CHARSET utf8 COLLATE utf8_general_ci;grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;flush privileges; 备注说明:创建以下数据库: 12345678910111213141516171819#hivecreate database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci;#activity monitorcreate database amon DEFAULT CHARSET utf8 COLLATE utf8_general_ci;#设置 root 授权访问以上所有的数据库:#授权 root 用户在主节点拥有所有数据库的访问权限grant all privileges on *.* to 'root'@'n1' identified by 'xxxx' with grant option;flush privileges;grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;flush privileges;#对用户授权mysql&gt;grant rights on database.* to user@host identified by &quot;pass&quot;;#例 1:#增加一个用户 test1 密码为 abc,让他可以在任何主机上登录,并对所有数据库有查询、插#入、修改、删除的权限。grantselect,insert,update,delete on *.* to test1@&quot;%&quot; Identified by &quot;abc&quot;;ON 子句中*.* 说明符的意思是“所有数据库,所有的表”#例 2:#增加一个用户 test2 密码为 abc, 让他只可以在 localhost 上登录,并可以对数据库 mydb 进行#查询、插入、修改、删除的操作。grant select,insert,update,delete on mydb.* to test2@localhost identified by &quot;abc&quot;; 下节 主节点安装 hive 和启动 ```","link":"/2020/05/08/6/"},{"title":"主节点安装 Hive","text":"第七节 主节点安装 Hive 上传压缩包,解压 1wget https://archive.apache.org/dist/hive/hive-0.12.0/hive-0.12.0-bin.tar.gz 安装 mysql 服务器(见上一节) 配置环境变量 123456vi /etc/profile export JAVA_HOME=/usr/app/jdk1.8.0_77export HADOOP_HOME=/usr/app/hadoop-2.7.3export HBASE_HOME=/usr/app/hbase-1.2.6export HIVE_HOME=/usr/app/hive-0.12.0export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin:$HIVE_HOME/bin 进入 hive 的 conf 目录新建一个 hive-site.xml 12cd /usr/app/hive-0.12.0/touch hive-site.xml 在 hive-site.xml 中写入 mysql 连接信息 123456789101112131415161718192021222324252627282930&lt;configuration&gt;&lt;property&gt;&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;&lt;value&gt;jdbc:mysql://hadoop11:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;&lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;&lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;&lt;value&gt;root&lt;/value&gt;&lt;description&gt;username to use against metastore database&lt;/description&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;&lt;value&gt;123456&lt;/value&gt;&lt;description&gt;password to use against metastore database&lt;/description&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;hive.server2.thrift.sasl.qop&lt;/name&gt;&lt;value&gt;auth&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;hive.metastore.schema.verification&lt;/name&gt;&lt;value&gt;false&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt; 将 mysql 的驱动包复制到 hive 的 lib 目录下 app/hive-0.12.0/lib 修改/usr/app/hive-0.12.0/conf/hive-env.sh 1234# 增加以下内容export JAVA_HOME=/usr/app/jdk1.8.0_77export HADOOP_HOME=/usr/app/hadoop-2.7.3export HBASE_HOME=/usr/app/hbase-1.2.6 验证hive安装 123456Sh /usr/app/hive-0.12.0/bin/hive #启动 hivehive&gt; create table test(id int,name string);hive&gt; show tables;[root@hadoop11 ~]# hadoop fs -lsr / 下节 flume安装","link":"/2020/05/08/7/"},{"title":"flume安装","text":"第八节 flume安装 Flume 安装 1234cd /usr/app/wget http://archive.apache.org/dist/flume/1.6.0/apache-flume-1.6.0-bin.tar.gztar -zxvf apache-flume-1.6.0-bin.tar.gz mv apache-flume-1.6.0-bin flume1.6 #重命名 配置 12345678#添加环境变量vi /etc/profile#添加以下两行内容export Flume_HOME=/usr/app/flume1.6export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin:$HIVE_HOME/bin:$Flume_HOME/bin#更新profilesource /etc/profile 123456789#编辑/usr/app/flume1.6/conf/flume-env.shcd /usr/app/flume1.6/conf/cp -r flume-env.sh.template flume-env.shchmod 777 flume-env.shvi flume-env.sh#添加Java 路径export JAVA_HOME=/usr/app/jdk1.8.0_77# 设置权限chmod 777 flume-env.sh 测试配置 12#查看版本flume-ng version 下节kafka安装","link":"/2020/05/08/8/"},{"title":"kafka安装","text":"第九节 kafka安装Kafka 安装和使用 安装 1234cd /usr/appwget https://archive.apache.org/dist/kafka/0.8.1.1/kafka_2.10-0.8.1.1.tgztar –zxvf kafka_2.10-0.8.1.1.tgzmv kafka_2.10-0.8.1.1 kafka2.10 配置 123456789101112131415cd /usr/app/kafka2.10#编辑配置文件server.propertiesvi /usr/app/kafka2.10/config/server.properties#添加下面两行host.name=hadoop11zookeeper.connect=hadoop11:2181,hadoop12:2181,hadoop13:2181#传到其余机器scp -r /usr/app/kafka2.10 root@hadoop12:/usr/appscp -r /usr/app/kafka2.10 root@hadoop13:/usr/app#复制完之后分别修改修改slave1、slave2的Kafka安装目录下的config/server.properties文件 broker.id# slave1broker.id=2# slave2broker.id=3 启动kfaka 12#启动 kafka 之前,需要启动 Zookeeper/usr/app/kafka2.10/bin/kafka-server-start.sh -daemon /usr/app/kafka2.10/config/server.properties&amp; Kafka 命令行操作 生产者接收用户的标准输入发送到 Kafka，消费者则一直尝试从 Kafka 中拉取生产的数据， 并打印到标准输出中。下面使用 Kafka 命令行客户端创建主题、 生产者与消费者，以测试 Kafka 集群能否正常使用。","link":"/2020/05/08/9/"},{"title":"当我们在谈论动态规划时，在谈些什么？","text":"初次接触动态规划时在算法课 知其然，知其所以然 动态规划的发明历程动态规划既是一种数学优化方法，也是一种计算机编程方法。该方法由Richard Bellman在 1950 年代开发，当时美国数学家Richard Bellman在研究多阶段决策过程的最优解时，提出了最优性原则，并将其应用到动态规划方法中。Bellman在其著作《动态规划》中详细介绍了这种方法，并且这本书的出版标志着动态规划作为一种数学方法的诞生。 动态规划最初的应用是在经济学中，用于解决投资和资源分配的问题。之后，动态规划方法被广泛地应用于许多其他领域，包括工程学、计算机科学、生物学和物理学等。特别是在计算机科学中，动态规划方法被广泛应用于算法设计和优化，如在图形处理、字符串匹配和最短路径等方面。 动态规划方法的本质是将大问题划分为若干个小问题，并将其按顺序求解。在求解每个小问题时，动态规划方法会保存已经解决的子问题的结果，以便后续计算时重复利用，避免重复计算，提高算法效率。因此，动态规划是一种非常强大的优化方法，能够解决很多复杂问题。 最优性原则是由Richard Bellman开发的动态规划的基本原则：最优路径具有以下特性：无论初始条件和初始阶段的控制变量（选择）如何，选择的控制（或决策变量）在剩下的时间段内，对于剩余的问题必须是最佳的，因为早期决定所导致的状态是最初的状况。 在编程中以背包问题为例： 定义状态：将问题抽象为状态。在背包问题中，状态可以定义为在前i个物品中选择一定物品放入一个容量为j的背包可以获得的最大价值。这里的i和j都是状态的变量。 定义状态转移方程：确定状态转移的方式和公式。在背包问题中，状态转移方程可以定义为：当选择第i个物品时，背包剩余的容量为j，此时背包可以装下的最大价值为f(i, j) = max{f(i-1, j), f(i-1, j-w(i))+v(i)}。其中w(i)和v(i)分别表示第i个物品的重量和价值。 确定边界条件：确定状态的起点和终点。在背包问题中，边界条件可以定义为：当i=0或j=0时，背包中的最大价值为0。 计算最终结果：根据状态转移方程和边界条件，通过迭代计算得到最终的结果。在背包问题中，最终的结果为f(n, C)，其中n表示物品的总数，C表示背包的容量。 总的来说，动态规划是一种通过将问题拆分为多个子问题并重复利用已经计算出来的结果来求解最优解的方法。它在计算机编程和数学优化中都有着广泛的应用，并为我们提供了一种强大的工具来解决复杂的问题。","link":"/2021/08/07/Dynamic-Programing/"},{"title":"English grammar  affix","text":"[TOC] 词缀（affix） 是一种附着在词根或词干的语素，为规范词素，不能单独成字。词缀可以是派生变化，如英语的*-ness* and pre-*，也可以是屈折变化，如英语的复数 *-s 和过去式*-ed。* 依位置分类根据词缀和词干结合位置的不同，可分为不同的词缀。前缀和后缀在语言中较常见，中缀和环缀较少见，因为他们在欧洲语言中并不重要。其他的词缀罕见。 词缀 范例 模式 描述 前缀/词头 prefix undo 反战 前缀-词干 出现在词干之前 后缀/词尾 suffix looking 吃了 词干-后缀 出现在词干之后 中缀/词嵌[1] infix saxomaphone 吃过饭 词干&lt;中缀&gt;词干 出现在词干之中，常见于婆罗洲-菲律宾语系 或南岛语系里。 环缀 circumfix ascattered 环缀&gt;词干&lt;环缀 一部分出现在词干前，另一部分出现在词干后 间缀 interfix speedometer 词干a-间缀-词干b 连结两个词干使成为复合字 复缀 duplifix moneyshmoney看一看 词干~复缀 复制一部分的词干，可出现在前、中、后的位置 插缀 transfix 马耳他语： kiteb （他写）、词根ktb（写） 一清二楚、三不五时、七零八落 词干&lt;插缀&gt;词干&lt;插缀&gt;词干 非连续性的词缀穿插在单一词干之中 屈折缀 simulfix mouse → mice 词干内部屈折变化 改变词干的一部分 变调缀 suprafix product（名词） produce（动词） 词干语音的声调或重音变化 改变音素的音韵性质 减缀 disfix 阿拉巴马语：tipli（打破） 词根tipasli（破） 词干一部分删减 一部分的词干省略 前缀和后缀统称为外缀(adfix)，与内缀(infix)相对。[2] 在相互对应注解（interlinear glossing）中，简单的词缀如外缀用-与词干分开；打断词干或不连续的词缀用&lt;&gt;表示；复缀用~标记；不能分开的词缀用\\。 依功能性分类不同语言各有不同的语法,使用词缀的方式也不尽相同,以下是英语与汉语的词缀用法 英语词缀（affix）根据语法功能、特性，可区分为： derivational affix[3]或中译为派生词缀：会造成词性以及语意变化，产生一个词性不同的新词。例如，“run”的词性是动词，在之后加上“er”变成“runner”，词性变为名词，意思也略有转变，“er”在此就是派生词缀。 inflectional affix或中译为曲/屈折词缀：只会改变一词的文法特性，并不改其语意。例如，在“run”之后加上“ing”成为“running”，表示进行中的概念(ing后亦有引申用来表示持续、未完成等等概念的用法)，“ing”在此就是曲折词缀。 汉语词缀根据语法功能、特性，可区分为： word-formation affix[4]或称为构词词缀、词变词缀：会造成词性以及语意变化，产生一个词性不同的新词。例如，“跑”的词性是动词，在之后加上“者”变成“跑者”，词性变为名词，意思也略有转变，“者”在此就是构词词缀。 Grammatical affix或称为语法词缀：只会改变一词的文法特性，并不改其语义。例如，在“跑”之后加上“著”成为“跑着”，表示持续进行的概念(“著”后来亦有引申用来表示状态持续存在等概念的用法)，“著”在此就是语法词缀。 变格变格（declension）在语言学上是指名词、代词、冠词、形容词在句子中为了实现特定的语法功能而产生的词形变化。动词的这种屈折变化一般被称作变位。 词通过变格能够反映自身的性（阴性、阳性、中性等）、数（单数、双数、复数等）、格（主格、宾格、与格、属格等）及其他语法范畴上的归属。 许多语言都存在变格。在印欧语系、班图语支、闪米特语族、芬兰-乌戈尔语族、突厥语族诸语言中，变格都是相当重要的一部分。 现代英语主条目：英语语法 现代英语的变格系统几近消失，仅保留了人称代词的部分性数格变化、名词的部分数格变化。 现代英语的名词大部分的格变化都已消失，仅属格（或称所有格）仍保留变格。亦即名词的宾格、与格等语义格与主格完全一致，没有屈折变化，共享一个语法格；仅名词的属格需要进行屈折变化。属格的变格由附着语素-‘s来表现。对于以s结尾的名词（如大多数名词的复数形式），其属格则只需附着语素*-‘*。 以“boy”（男孩）为例，下表展示了该名词的全部变格： 单数 复数 普通（主格、目的格等） boy boys 属格（所有格） boy**’s** boys’ 不过有些名词的复数形式稍显复杂。以“man”（人／男人）为例： 单数 复数 普通（主格、目的格等） man men 属格（所有格） man**’s** men**’s** 一般认为，名词的派生变化不属于变格。如名词“Britain”（不列颠）派生出形容词“British”（不列颠的）和区域居民称谓词“Briton”（不列颠人）。尽管这些词显然互相关联，属于同源词，但一般不被视作同一个词的形态变化，因此不属于变格。 人称代词变格现代英语的人称代词变格略为复杂，详见下表。 人称 性 数 主格 宾格、与格 属格限定词 属格代词 反身代词 第一人称 单数 I me my mine myself 第二人称 you your yours yourself 第三人称 阳性 he him his himself 阴性 she her hers herself 中性 it its itself 第一人称 复数 we us our ours ourselves 第二人称 you your yours yourselves 第三人称 they them their theirs themselves 名词的主格和宾格并无区别，但部分人称代词的主格和宾格并不相同。此外，疑问代词“who”（谁）也有不同的主格（“who”）、宾格（“whom”)、属格（“whose”）形态，不过主格和宾格均使用“who”已经越来越常见。 现代英语中唯一仍保留性变化的就是第三人称单数的人称代词。不过名词仍可以被赋予性别，只是不再是语法上必须的变格。外来词，尤其是来自拉丁语和其他罗曼语族语言的的借词，其变格通常会被保留。如“alumnus”（校友，阳性单数）和“alumna”（校友，阴性单数）。 形容词变格多数形容词无任何变格。不过当形容词用作名词时需要变格。比如，将“I’ll take the red wines”（我选红酒）省略作“I’ll take the reds”（我选红的）时，省略了“red wines”（红酒）中的名词“wines”（酒），以形容词“red”（红色的）临时充当名词，因此形容词“red”需临时承担名词“wine”的变格任务。因为“wine”采用了复数形式“wines”，所以省略后“red”亦须变格为“reds”以反映指代的是一个复数名词。 此外，指示限定词“this”（这个）和“that”（那个）有数的变化。其复数形式分别为“these”（这些）和“those”（那些）。 自其他语言借入的形容词也可能（亦或被允许）必须保留其性的变化。比如“blond”（金色的，阳性）、“blonde”（金色的，阴性）。 现代英语中形容词不根据主格、宾格等语法格进行变格，不过古英语中有此要求。 冠词变格现代英语中，冠词无需变格。不过正式而言，“that”（那个）和“she”（她）分别来自古英语冠词“sē”的中性变格“þæt”和阴性变格“sēo”。 语素语素（Morpheme）又称形态素、义基[1]，在语素构词学里指最小的语法单位，是最小的语音语义结合体。[2] 在口语中，语素是由音位这一种能区别的最小声音单位所组成的，而在文字形式语言中，语素则是由字位所组成的。因为汉语是一字一音，所以可按照音位的个数，区分成单音节语素、双音节语素、多音节语素和非音节语素。[2] 语素和词不同，有许多的语素不能够单独地构成词。依据是否可单独成词，语素可分为自由语素和规范语素（又称不自由语素）。[3] 以英语为例，unbreakable 这个词有三个语素：un-（规范语素）、break（自由语素）和 -able（自由语素）。","link":"/2021/04/08/English-words/"},{"title":"Git基础命令","text":"基本概念Git是一个开源的分布式版本控制系统,可以有效,高速的处理从小到非常大的项目 版本管理.不同于SVN. 工作区:文件夹中能看到的目录,不包括隐藏目录 暂存区:一般是存放在”.git目录下的”index文件.用git add的文件都会放在这里. 版本库:工作区下隐藏目录.git. .gitignore 文件是一个文本文件，通常位于 Git 仓库的根目录，用于指定要忽略的文件和目录的规则。可以使用 # 符号在文件中添加注释。 123456789101112# 忽略所有 .log 文件*.log # 忽略所有 .tmp 和 .bak 文件*.tmp*.bak # 忽略 build 目录及其内容/build/ # 但是不忽略 build/logs 目录!/build/logs/ 新建文件夹,git init 初始化目录,作用将一个已经存在的文件夹,置于Git的 控制管理之下. git add ,将创建或者修改的文件添加到本地的暂存区,保存临时更改. 123git add &lt;file&gt; # 将指定文件添加到暂存区git add &lt;directory&gt; # 将指定目录及其内容添加到暂存区git add . # 将当前目录下的所有更改添加到暂存区 git commit 提交文件到本地仓库.git commit -m &quot;注释&quot; git pull从远程存储库获取最新的更改并将它们合并到目前的分支。git pull 实际上包含了两个步骤：git fetch 和 git merge 或 git rebase,它用于更新本地分支以反映远程分支的最新状态。 1git pull origin main git push 将本地代码库同步到远端仓库. 1git push origin main git clone [url]克隆仓库到本地. git checkout 用于在不同的分支、提交和标签之间切换，以及在工作目录中还原文件的状态。 切换分支： 切换到已存在的本地分支：git checkout &lt;branch-name&gt; 创建并切换到新分支：git checkout -b &lt;new-branch-name&gt; 例如，要切换到一个名为 feature-branch 的分支，可以运行： 1git checkout feature-branch 要创建并切换到一个名为 new-feature 的新分支，可以运行： 1git checkout -b new-feature 切换到特定提交： 你可以使用 git checkout 切换到特定提交，这会使你进入分离头状态（detached HEAD），可以查看特定提交的文件状态。 1git checkout &lt;commit-hash&gt; 例如，要查看特定提交 abcd123 的文件状态，可以运行： 1git checkout abcd123 切换到标签（tags）： 你可以使用 git checkout 切换到一个标签（tags），这会将你的 HEAD 移动到标签所指向的特定提交，通常用于查看和测试特定版本。 1git checkout &lt;tag-name&gt; 例如，要切换到标签 v1.0，可以运行： 1git checkout v1.0 恢复单个文件： git checkout 还可以用于还原单个文件的状态。这在你不小心更改了某个文件，想要将其还原到最后一个提交状态时非常有用。 1git checkout -- &lt;file&gt; 例如，要还原名为 my-file.txt 的文件到最后一个提交状态，可以运行： 1git checkout -- my-file.txt git merge 将一个分支的更改合并到另一个分支中，通常将特性分支的更改合并到主分支（如 master 或 main）以更新项目的主要版本。 1git merge &lt;branch-name&gt; git remote add orgin 仓库链接将本地仓库连接到GitHub仓库 orign是这个仓库的小名,方便以后沟通,通常默认用orign表示 启用Vim编辑器:vim 文件名, 按i进入插入模式, 按ESC退出插入模式,再键入 :wq 回车,Vim就会保存文件并退出.","link":"/2020/02/25/Git%E6%9D%82%E8%AE%B0/"},{"title":"GTK移植到Windows VS2017","text":"[GTK](https://baike.baidu.com/item/gtk/3138659?fr=aladdin)主要是Linux下的图形工具包,但在windows与Mac os下面也有相应的版本。 本篇博文废话不多直入正题，下面开始我们的教程：[本文具有时效性] 首先，你要有Git，会基本操作就可以，不会Git操作也没关系，跟着博文走就行. Visual Studio2017 的准备操作: 这三个打上对勾, 下面就开始安装GTK 首先来到GTK官网,下载windows所需的版本,(XL工具),然后(下面是可耻翻译的官网的一大段话,但是你也要按我下面的步骤来): 从vcpkg软件包中使用GTK警告：GTK团队不维护vcpkg打包，它使用的构建系统不同于GTK所使用的构建系统。如果使用vcpkg构建GTK或其依赖项时发生故障，请确保在vcpkg问题跟踪器（而不是GTK 问题）中打开一个问题。 安装Microsoft vcpkg项目将GTK库以及所有先决条件和许多语言绑定（例如C ++绑定gtkmm）打包在一起，以便与Visual Studio一起使用。这提供了一种非常简单的方法来设置开发环境以创建GTK应用程序。如果您希望通过命令行而不是使用Visual Studio进行更类似于UNIX的体验，则可能需要考虑从MSYS2安装GTK。 为了使用vcpkg软件包，首先需要克隆vcpkg存储库， 然后可以使用以下命令安装GTK软件包 ：冒号“：”后面的部分指定目标。完成此步骤后，在Visual Studio中创建的任何项目现在都将自动看到GTK库。依次在Git上敲击以下命令: git clone https://github.com/Microsoft/vcpkg cd vcpkg ./bootstrap-vcpkg.bat ./vcpkg install gtk:x64-windows构建和分发您的应用程序如上所述安装GTK后，编译GTK应用程序应该没有问题。为了成功运行它，您还将需要一个GTK主题。GTK中对Windows主题有一些旧的内置支持，但这使您的应用看起来像Windows 7应用。最好使用Windows 10主题，例如Windows 10 Transformation Pack。 gtk-3.20将该存储库的文件夹复制到share/themes/Windows10/gtk-3.0/安装文件夹中的文件夹中。您还需要复制Adwaita主题中的图标，可以从Linux框中获取图标，它们存储在其中 /usr/share/icons/Adwaita/；将此整个文件夹复制到 share/icons安装文件夹中的文件夹中。彩色图标的同上。为了使GTK能够使用此主题，请将文件settings.ini放在etc/gtk-3.0 安装文件夹中。它应该包含 并且最重要的是，找到其中的文件并将其复制到 。[Settings]gtk-theme-name=Windows10gtk-font-name=Segoe UI 9 gschemas.compiled/usr/share/glib-2.0/schemas/share/glib-2.0/schemas 然后，您可以压缩安装文件夹，或使用安装程序生成器为您执行此操作，然后分发结果。 最后,在VS上复制一下这段代码,应该可以成功运行,不能就在下面留言 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203#include &lt;gtk/gtk.h&gt;#pragma warning (disable:4996)/* 我们的回调。* 传到这个函数的数据被打印到标准输出 */void callback(GtkWidget *widget, gpointer data){ g_print(&quot;%s&quot;, (char *)data);}/* 这个回调退出程序 */gint delete_event(GtkWidget *widget, GdkEvent *event, gpointer data){ gtk_main_quit(); return FALSE;}int main(int argc, char *argv[]){ GtkWidget *window; GtkWidget *button; GtkWidget *table; gtk_init(&amp;argc, &amp;argv); /* 创建一个新窗口 */ window = gtk_window_new(GTK_WINDOW_TOPLEVEL); /* 设置窗口标题 */ gtk_window_set_title(GTK_WINDOW(window), &quot;Shimmer's Keyboard&quot;); /* 为 delete_event 设置一个立即退出 GTK 的处理函数。 */ g_signal_connect(G_OBJECT(window), &quot;delete_event&quot;, G_CALLBACK(delete_event), NULL); /* 设置窗口的边框宽度。 */ gtk_container_set_border_width(GTK_CONTAINER(window), 20); /* 创建一个 2x2 的表 */ table = gtk_table_new(4, 20, TRUE); /* 将表放进主窗口 */ gtk_container_add(GTK_CONTAINER(window), table); /* 创建第一个按钮 */ button = gtk_button_new_with_label(&quot;Q&quot;); /* 当这个按钮被点击时,我们调用 &quot;callback&quot; 函数,并将一个指向&quot;button 1&quot;的指针作为它的参数 */ g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;q&quot;); /* 将 button 1 插入表的左上象限(quadrant) */ gtk_table_attach_defaults(GTK_TABLE(table), button, 0, 2, 0, 1); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;W&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;w&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 2, 4, 0, 1); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;E&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;e&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 4, 6, 0, 1); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;R&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;r&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 6, 8, 0, 1); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;T&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;t&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 8, 10, 0, 1); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;Y&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;y&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 10, 12, 0, 1); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;U&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;u&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 12, 14, 0, 1); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;I&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;i&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 14, 16, 0, 1); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;O&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;o&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 16, 18, 0, 1); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;P&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;p&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 18, 20, 0, 1); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;A&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;a&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 1, 3, 1, 2); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;S&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;s&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 3, 5, 1, 2); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;D&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;d&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 5, 7, 1, 2); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;F&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;f&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 7, 9, 1, 2); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;G&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;g&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 9, 11, 1, 2); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;H&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;h&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 11, 13, 1, 2); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;J&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;j&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 13, 15, 1, 2); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;K&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;k&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 15, 17, 1, 2); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;L&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;l&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 17, 19, 1, 2); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;'&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;'&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 0, 2, 2, 3); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;Z&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;z&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 2, 4, 2, 3); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;X&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;x&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 4, 6, 2, 3); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;C&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;c&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 6, 8, 2, 3); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;V&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;v&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 8, 10, 2, 3); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;B&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;b&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 10, 12, 2, 3); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;N&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;n&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 12, 14, 2, 3); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;M&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;m&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 14, 16, 2, 3); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;,&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;,&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 16, 18, 2, 3); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;.&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;.&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 18, 20, 2, 3); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot;Enter&quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot;\\n&quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 2, 6, 3, 4); gtk_widget_show(button); /*********************/ button = gtk_button_new_with_label(&quot; &quot;); g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(callback), (gpointer) &quot; &quot;); gtk_table_attach_defaults(GTK_TABLE(table), button, 6, 16, 3, 4); gtk_widget_show(button); /* 创建&quot;Quit&quot;按钮 */ button = gtk_button_new_with_label(&quot;Quit&quot;); /* 当这个按钮被点击时,我们调用 &quot;delete_event&quot; 函数接着程序就退出了 */ g_signal_connect(G_OBJECT(button), &quot;clicked&quot;, G_CALLBACK(delete_event), NULL); /* 将退出按钮插入表的下面两个象限 */ gtk_table_attach_defaults(GTK_TABLE(table), button, 16, 19, 3, 4); gtk_widget_show(button); gtk_widget_show(table); gtk_widget_show(window); gtk_main(); return 0;}//The code is copied by others","link":"/2019/12/08/GTK%E7%A7%BB%E6%A4%8D%E5%88%B0Windows%E5%B9%B3%E5%8F%B0/"},{"title":"Google开发者模式","text":"1, Google F12 打开控制台界面,详情如图. Elements:页面元素,可以进行编辑,查看实时效果 Console:模拟JS控制台,可以在此处直接写代码(脚本文件),实现一些自动化任务 Sources:查看加载本页面所调用的资源 Network:查看js模拟的http请求可以实时的看到请求地址，点击请求地址，会把请求的头信息和响应信息等数据展示出来 Performance:性能分析 2,源码定位:右键点击检查,定位到指定元素的源码. 3, - console.log:用于输出普通信息 console.info:用于输出提示性信息 console.error:用于输出错误信息 console.warn:用于输出警示信息 console.debug:用于输出调试信息 console.group:输出一组信息的开头 console.groupEnd:结束一组输出信息 console.assert:对输入的表达式进行断言,表达式为False输出相应信息 console.count:统计它本身被调用的次数,接受一个参数作为标签,对不同函数执行次数进行分类,图示: console.dir():打印特定对象的详细信息.可以将DOM结点以DOM树的结构进行输出 console.time(),console.timeEnd:统计之间代码运行时间","link":"/2020/03/23/Google%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F/"},{"title":"HTTP协议","text":"HTTP（HyperText Transfer Protocol，超文本传输协议）是一种应用层协议，设计用于Web服务器和浏览器之间的通信。它不仅可以传输文本，还能传输图片、视频等多媒体文件。由于HTTP本身不提供数据加密功能，因此通过它传输的所有数据都是以明文形式进行，容易被中间人攻击者截取和查看。为了增加安全性，通常使用HTTPS（即HTTP Secure），它在HTTP的基础上通过SSL/TLS提供了数据加密。 HTTP是一个无状态的协议，这意味着服务器不会自然记住任何客户端之前的请求或相应状态。为了实现状态的持续性，它依赖于cookie和session来跟踪用户的状态。可以将HTTP的无状态性比喻为在咖啡店的每次购买都是独立的交易；即使你是常客，如果没有某种方式来识别你（比如会员卡），服务员每次见到你时都会认为是第一次。在HTTP通信中，cookie和session就像是网站给浏览器的“会员卡”。 HTTP定义了多种请求方法，以表明对指定资源的预期操作: GET:于请求获取指定资源。这种方法主要用于检索信息，并且应该是安全和幂等的，意味着请求不会引起服务器状态的变化。 POST:向服务器提交数据，如表单数据或文件上传，可能会导致服务器状态的变化或资源的创建。POST不是幂等的，意味着相同的POST请求如果执行多次，可能会每次都产生不同的结果。 PUT:用于更新或替换服务器上的现有资源。与PATCH不同，PUT请求通常包含资源的完整副本，并且是幂等的，即重复执行相同的PUT请求应该得到相同的结果。 PATCH:用于对资源进行部分更新。与PUT方法相比，PATCH允许更新资源的一个或多个属性，而不需要替换整个资源。 DELETE:删除指定的资源。 每种方法根据其设计意图在不同的场景下使用，有助于实现网络请求的标准化和优化。 cookie:由服务器生成发送给浏览器一小段数据，最大为4k，用来存储用户的偏好设置,如登录状态和浏览记录等 session:一个服务器端的存储机制，用来跟踪用户的会话状态。服务器为每个用户会话分配一个唯一的Session ID，通常通过存储在用户浏览器中的Cookie来传递。这允许服务器在用户浏览网页时持续跟踪用户状态，适用于登录系统和购物车等需要状态持续性的场景。 token:一种安全的认证机制，通常由服务器生成并发给客户端。客户端在后续请求中携带这个Token，以此证明其身份。Token 常通过 HMAC 或公钥基础的加密方法进行签名，确保数据的完整性和安全性。JSON Web Tokens (JWT) 是一种广泛使用的Token格式，能够在无状态的情况下安全传递信息。 RESTful API 是一种软件架构风格，它定义了一组约定，用于创建、读取、更新和删除资源的Web服务接口。在RESTful架构中，每个资源都通过一个唯一的URI（统一资源标识符）来标识，并通过标准的HTTP方法（如GET、POST、PUT、DELETE）进行操作。资源通常以JSON或XML格式表示。下面我将通过几个方面来帮助你更好地理解RESTful API设计规范，包括URI的概念和例子。 URI的概念 URI，即统一资源标识符，是用来唯一标识互联网上的资源。在RESTful API中，每个资源都对应一个特定的URI。例如，假设我们有一个关于书籍的Web服务，每本书都可以通过一个URI来访问。 RESTful API的核心原则 资源的标识：通过URI来唯一标识资源。 统一接口：使用标准的HTTP方法来操作资源。 无状态通信：每次请求都包含所有必要的信息，服务器不需要记住客户端的状态。 可缓存的：响应可以被明确地、隐式地标记为可缓存或不可缓存。 具体的URI例子 假设我们有一个关于书籍的服务，以下是一些示例URI： 获取所有书籍的列表： GET /books 获取具体某本书的信息（例如书籍ID为1）： GET /books/1 添加一本新书： POST /books 更新某本书的信息（例如书籍ID为1）： PUT /books/1 删除某本书（例如书籍ID为1）： DELETE /books/1 RESTful API设计示例 考虑一个书籍管理系统，其RESTful API设计可能包括以下端点： 列出所有书籍 (GET /books)：返回书籍列表。 创建新书籍 (POST /books)：提交新书籍的数据。 获取某本书的详细信息 (GET /books/{id})：返回指定ID的书籍的详细信息。 更新某本书的信息 (PUT /books/{id})：更新指定ID的书籍的详细信息。 删除某本书 (DELETE /books/{id})：删除指定ID的书籍。 通过使用这些基本的HTTP方法和清晰的URI，RESTful API使得Web服务变得简单、直观并易于使用。希望这些解释和例子能帮助你更好地理解RESTful API的设计规范和URI的作用。","link":"/2020/04/08/HTTP%E5%8D%8F%E8%AE%AE/"},{"title":"Hexo安装记录","text":"前言此处是废话，可以跳过。&emsp;&emsp;作为一名未来的挨踢人,博客是必不可少的一个工具，记录日常中做的项目，遇到的Bug等等（好记性不如烂笔头嘛！） &emsp;&emsp;&nbsp;目前，国内的博客平台主要有CSDN，博客园，简书等，但是他们往往无法满足人们个性化的要求，因此，我们选择白嫖Github 提供的Github Pages(静态网页托管服务) 搭建我们的静态博客。&emsp;&emsp;目前静态博客框架主要有Hexo,Hugo,Jekyll,Ghost，Gridea，此处博主选用Hexo，Hexo网上资料比较多:wink: Github 配置开启Github Pages服务 首先你需要有一个GitHub账号:如果没有,点击这里注册,过程不详述. 新建一个GitHub仓库，图例奉上:点击主页的加号，选择 New repository后进入此页面:Repository name处（仓库名称)切记命名为Username.github.io,([你的Github用户名]+[.github.io]),可能你会对仓库命名(Username.github.io)感到不解,这是Github Pages的命名规范,疑惑解答详见官方文档 安装配置Git Bash下载官网，选择合适的版本，如果没有梯子的话，建议用迅雷下载。 查看是否安装成功: 安装完成后,在cmd窗口输入命令git --version #查看git版本号 cmd打开方法:快捷键win+R打开运行,输入cmd回车即可进入命令提示符.配置Git Bash:打开Git Bash ，输入git config --global user.name&quot; &quot; 回车,配置用户名,再输入git config --global user.email&quot; &quot;回车,配置邮箱 配置SSH免密登录:打开Git Bash,输入ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot; ，然后一直回车就OK,再然后转到 .ssh目录下：id_rsa和id_rsa.pub,用记事本打开.ssh目录下的id_rsa.pub文件，复制里面的内容；转到Github,点击Settings ,选择SSH and GPG keys 标题随意填写，在Key处填入刚才复制的公钥。 测试 ssh :输入 ssh -T git@github.com,出现Successfully，至此配置完成；操作图例: 安装Node js 点击此处,访问官网,下载相应版本. 检验是否安装成功,在cmd中输入 node -v npm -v ，出现相应版本号，至此安装完成。 Hexo配置 替换原有镜像源,安装命令: 12npm i -g cnpm --registry=https://registry.npm.taobao.org 安装hexo 12cnpm install hexo-cli -g cnpm install hexo-deployer-git --save Hexo初始化 1234567891. 新建文件夹，用于存放博客文件。2. 使用Gitbash进入到该文件夹下: - 鼠标右键点击该文件夹，选择Git Bash Here， - 或者打开gitbash，输入命令`cd 文件夹绝对路径` 3. 在Gitbash内输入以下命令:hexo init Hexo 文件配置 关联远程仓库 打开博客文件夹下的_config.yml（主配置文件）,在文件末尾加入以下内容，并修改相应的配置信息。1234deploy: type: git repository: git@github.com:username/username.github.io #username替换为你的用户名 branch: master 操作图例: 至此，博客初步搭建完成，执行以下命令，即可打开 http://localhost:4000/或者访问`xxx.github.io` 查看效果 123hexo g #生成静态文件hexo d#部署到githubhexo s #启动端口 显示以下信息说明操作成功： 1INFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 常用命令12345678hexo init //初始化博客文件hexo g //生成静态文件hexo d //部署到githubhexo s //启动端口hexo clean //清除缓存hexo new post &quot;postname&quot; //生成新文章hexo new page &quot;pageName&quot; //新建页面hexo version //查看hexo的版本 更换主题 打开GitHub,搜索hexo theme，挑选喜欢的主题,使用Git Bash克隆到博客目录下的themes文件夹下. ，修改博客目录下的_config.yml文件.找到theme,将默认的landscape替换为你心仪的主题即可,Github克隆速度不太稳定,推荐使用码云作为中转,然后再用Git Bash克隆到本地。 主题个性定制等有缘再更,推荐多阅读官方文档. Hexo 推荐 hexo-admin #方便管理文章 hexo-blog-encrypt #加密文章 typora #好用的markdown写作工具 PIGO+又拍云等 #作为图床 购买自己的域名 #目前国内Github访问速度不是很理想，你也可以用国内的码云，coding等，但是他们的限制比Github多，推荐（V2，SSR，XX-net） ，至此，就可以开始你的折腾了！","link":"/2020/02/10/Hexo%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"title":"Https解析","text":"HTTPS 详解传统的HTTP (Hypertext Transfer Protocol) 协议在数据传输过程中是明文的，这意味着任何恶意的第三方都可以轻易地窃听、篡改或伪造通信内容，给用户隐私和数据安全带来巨大风险。 HTTPS (Hypertext Transfer Protocol Secure) 正是为了解决这些问题而诞生的。它是在HTTP的基础上，加上了 SSL (Secure Sockets Layer) 或 TLS (Transport Layer Security) 协议，为网络通信提供加密、身份验证和数据完整性保护。其核心目标是确保用户与网站之间的通信是私密、安全和不可篡改的。 HTTPS的安全性主要由SSL/TLS协议提供。SSL/TLS协议位于应用层 (HTTP) 和传输层 (TCP) 之间，为上层应用提供加密和认证服务。 SSL/TLS 协议SSL/TLS协议是HTTPS的核心组件，TLS是SSL的升级版本。它们提供三项基本服务： **加密 (Encryption)**：确保数据在传输过程中不被窃听。通过对称加密和非对称加密结合使用，对传输的数据进行加密，即使数据被截获，没有密钥也无法解密。 **身份验证 (Authentication)**：确保客户端连接的是预期的服务器，防止中间人攻击。通过数字证书来验证服务器的身份。服务器也可以配置为验证客户端身份（双向认证）。 **数据完整性 (Data Integrity)**：确保数据在传输过程中未被篡改。通过消息认证码（MAC）或哈希函数来校验数据，保证数据在传输过程中没有被修改。 关键技术 **非对称加密 (Asymmetric Encryption)**： 使用一对密钥——公钥 (Public Key) 和 **私钥 (Private Key)**。 公钥可以公开，主要用于加密数据或验证签名；私钥必须保密，主要用于解密数据或生成签名。 特点：加密和解密使用不同的密钥，公钥无法推导出私钥。 主要用于在握手阶段安全地协商对称密钥和验证身份。 **对称加密 (Symmetric Encryption)**： 使用同一把密钥进行加密和解密。 特点：速度快，效率高，适用于大量数据的加密。 挑战：密钥交换的安全性。在HTTPS中，对称密钥是在TLS握手过程中通过非对称加密安全协商的。 **数字证书 (Digital Certificate)**： 由受信任的证书颁发机构 (CA, Certificate Authority) 签发。 包含服务器的公钥、服务器的身份信息（如域名）、CA的数字签名、证书有效期等。 用于验证服务器身份的真实性。 **证书颁发机构 (CA, Certificate Authority)**： 负责签发、管理和撤销数字证书的权威机构。 浏览器和操作系统内置了受信任的CA列表（根证书库）。 **哈希函数 (Hash Function)**： 将任意长度的输入数据映射为固定长度的输出（哈希值或摘要）。 特点：单向性（不可逆）、抗碰撞性 (collision resistance)（难以找到两个不同输入得到相同输出）。 用于验证数据完整性和数字签名。 数字证书生效过程用户访问HTTPS网站时，浏览器通过以下步骤验证证书是否有效： **证书交换 (Certificate Exchange)**： 客户端发起TLS握手：当用户在浏览器中访问HTTPS网址时，浏览器会自动向目标服务器发送一个 Client Hello 消息，启动TLS/SSL握手过程。此消息包含客户端支持的TLS版本、加密套件等信息。 服务器响应并返回证书链：服务器收到 Client Hello 后，会响应 Server Hello 消息（协商确认TLS版本和加密套件），并向客户端发送其服务器证书。通常情况下，服务器还会一并发送中间证书(Intermediate Certificates)，共同组成**证书链 (Certificate Chain)**，将这个打包后的证书链发送给客户端。 **基本验证 (Basic Validation)**： 有效期检查：检查证书是否在其指定的有效期内。 域名匹配：检查证书的 Subject Alternative Name (SAN) 字段（或早期的 Common Name (CN) 字段）是否与用户当前访问的域名一致。 **信任链验证 (Trust Chain Validation)**： 浏览器会从服务器证书开始，逐级验证证书链中的每个证书。 使用上一级证书（中间证书或根证书）的公钥，验证当前证书的数字签名是否有效。 如此层层向上验证，直到验证到根证书 (Root Certificate)。 确认根证书：检查该根证书是否存在于操作系统或浏览器的受信任根证书库中。如果根证书受信任，则整个证书链被认为是可信的。 **吊销状态检查 (Revocation Status Check)**： 浏览器会检查证书是否已被签发机构吊销。主要通过以下方式： **CRL (Certificate Revocation List)**：浏览器下载CA发布的证书吊销列表，检查目标证书序列号是否在列表中。 **OCSP (Online Certificate Status Protocol)**：浏览器实时向CA的OCSP服务器发送查询请求，获取证书的当前状态（有效、吊销或未知）。OCSP Stapling是一种优化，由服务器定期获取OCSP响应并随证书一起发送给客户端，提高效率。 **技术合规性验证 (Technical Compliance Validation)**： 签名算法强度：检查证书使用的签名算法（如RSA密钥长度至少2048位、ECDSA算法）是否符合当前的安全标准。强度不足的证书可能会被拒绝或收到警告。 **密钥用途 (Key Usage)**：检查证书的密钥用途扩展字段是否表明该证书可用于服务器身份验证（如 TLS Web Server Authentication）。 扩展字段合规性：检查其他必要的扩展字段（如 Basic Constraints）是否正确配置。 生效流程示例总结 客户端发起请求：用户在浏览器输入HTTPS开头的域名并访问。 服务器返回证书：服务器将其终端实体证书 (End-entity Certificate) 以及必要的中间证书链发送给客户端。 客户端验证证书链： 检查终端证书是否由中间证书A签发。 检查中间证书A是否由中间证书B（或根证书）签发。 以此类推，直至根证书。 检查根证书是否被本地操作系统或浏览器信任。 检查吊销状态：通过OCSP或CRL确认证书链中的所有证书均未被吊销。 域名匹配与有效期：确认证书中的域名与访问域名一致，且证书在有效期内。 建立加密连接：所有验证通过后，客户端信任服务器身份。随后，客户端和服务器使用非对称加密（通常利用证书中的公钥）安全地协商出一个对称密钥，之后的所有HTTP通信都将使用此对称密钥进行加密，开始安全的加密通信。 CSR, CRT, PEM 文件在处理SSL/TLS证书时，会遇到以下常见文件类型： **CSR (Certificate Signing Request - 证书签发请求)**： 这是一个包含了服务器公钥、组织信息（如域名、公司名称、城市等）以及一些可选属性（如电子邮件地址）的文件。 在向CA申请数字证书之前，由服务器管理员生成此文件，并将其提交给CA。 CA使用CSR中的信息来创建并签署数字证书。 **CRT (Certificate - 证书文件)**： 通常指由CA颁发的数字证书本身，扩展名常为 .crt，也可能是 .cer。 这是一个符合 X.509标准格式的文件，包含了服务器的公钥、服务器身份信息、CA的数字签名、证书有效期、颁发者信息等。 服务器将此文件（通常与中间证书一起构成证书链）配置好，以便客户端可以验证。 **PEM (Privacy Enhanced Mail)**： 这是一种基于Base64编码的文本文件格式，用于存储和传输各种密码学相关信息，如证书、私钥、公钥、CSR等。 PEM文件通常以 -----BEGIN CERTIFICATE-----、-----BEGIN PRIVATE KEY----- 等页眉开始，并以相应的 -----END ...----- 页脚结束。 .crt 文件和私钥文件 (如 .key) 经常以PEM格式存储。 部署 (Nginx 示例)通常使用Web服务器（如Nginx、Apache）进行HTTPS证书的部署。以下是一个Nginx的配置示例： 首先，将您的私钥文件（例如 your_domain.key）和CA颁发的证书文件（通常是一个包含了服务器证书及所有中间证书的捆绑文件，例如 your_domain_bundle.crt）放置在Nginx可以访问的一个安全目录中（例如 /etc/nginx/ssl/）。 然后，修改Nginx的站点配置文件（通常位于 /etc/nginx/sites-available/your_domain.conf 或 /etc/nginx/conf.d/your_domain.conf）。 在 server 块中，添加或修改SSL相关配置： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657server { listen 443 ssl http2; # 监听 443 端口，启用 SSL 和 HTTP/2 listen [::]:443 ssl http2; # 同样为 IPv6 监听 server_name your_domain.com www.your_domain.com; # 您的域名 ssl_certificate /etc/nginx/ssl/your_domain_bundle.crt; # 指向您的服务器证书和中间证书链的合并文件 ssl_certificate_key /etc/nginx/ssl/your_domain.key; # 指向您的私钥文件 # SSL/TLS 协议版本 ssl_protocols TLSv1.2 TLSv1.3; # 推荐只启用安全的 TLS 1.2 和 TLS 1.3 # 加密套件配置 # 对于 TLS 1.2，可以指定如下的强加密套件列表 ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; # TLS 1.3 的加密套件由 OpenSSL 库（Nginx 使用的）默认处理，通常包含: # TLS_AES_256_GCM_SHA384, TLS_CHACHA20_POLY1305_SHA256, TLS_AES_128_GCM_SHA256 # 如需显式控制 TLS 1.3 ciphers, 可使用 ssl_conf_command Ciphersuites &lt;cipher_list&gt;; ssl_prefer_server_ciphers off; # 对于 TLS 1.3 和 HTTP/2, 推荐设置为 off，允许客户端选择最优套件 # SSL 会话优化 ssl_session_timeout 1d; # 会话缓存超时时间 ssl_session_cache shared:SSL:10m; # 会话缓存大小 (10MB 约可存 40000 个会话) ssl_session_tickets off; # 考虑禁用 session tickets 如果有前向保密性的严格要求或使用不当的风险 # OCSP Stapling 配置 (提高证书状态检查效率) ssl_stapling on; # 启用 OCSP Stapling ssl_stapling_verify on; # 验证 OCSP 响应的有效性 resolver 8.8.8.8 8.8.4.4 valid=300s; # 配置 DNS 解析器，用于 OCSP Stapling (示例为Google Public DNS) resolver_timeout 5s; # HSTS (HTTP Strict Transport Security) - 推荐启用，强制客户端使用HTTPS # add_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot; always; # 其他安全头部 (可选，但推荐) # add_header X-Frame-Options DENY; # add_header X-Content-Type-Options nosniff; # add_header X-XSS-Protection &quot;1; mode=block&quot;; # add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot;; # 可选：将所有 HTTP 流量重定向到 HTTPS (在另一个 server 块中配置) # server { # listen 80; # listen [::]:80; # server_name your_domain.com www.your_domain.com; # return 301 https://$host$request_uri; # } location / { # 您的网站文件根目录或反向代理配置 root /var/www/your_domain.com/html; index index.html index.htm; # หรือ proxy_pass http://backend_server; } # 其他配置...} 注： 80 端口是 HTTP 的默认端口，443 端口是 HTTPS 的默认端口。当用户通过浏览器访问这些服务时，如果使用的是默认端口，则端口号通常会在URL中被省略，这对用户更加友好。 Nginx配置中的 ssl_ciphers 主要影响 TLS 1.2 及更早版本。TLS 1.3 的加密套件选择机制有所不同，通常由底层的SSL/TLS库（如OpenSSL）管理，且可选项更少、更安全。 上述Nginx配置是一个基础示例，实际部署时可能需要根据具体需求和安全最佳实践进行调整（例如，HSTS, 更详细的安全头部等）。","link":"/2024/06/06/Https%E8%A7%A3%E6%9E%90/"},{"title":"Linux命令杂记","text":"ls:查看当前目录中的内容cd:进入目录 cd .. &nbsp; :返回上一级目录 cd - &nbsp;: 返回上一次所在的目录 cd ~ &nbsp;:回到当前用户的主目录 mkdir 文件夹名称:在当前目录下创建文件夹touch 文件名:新建文件,不会覆盖已有文件cp 文件名 指定目录:复制文件到指定目录 cp -r 文件夹名 指定目录:复制文件夹到指定目录 rm 需删除文件名:删除指定文件 rm -r 需删除文件夹名称:删除指定文件夹 mv 移动文件夹/文件名 指定目录:移动文件夹/文件 mv 也可以为文件重命名:例如mv test1 test2 就可以 把test1重命名为test2 cat 文件目录/文件名:把文件中的内容打印到屏幕中 cat -n 文件名 :可以带行号打印文件内容 man 命令名称:可以获取命令详细的帮助文档 ,按q退出man 实践出真知!","link":"/2020/02/19/Linux%20%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/"},{"title":"Java基础语法及其特性","text":"发展 Java是一种面向对象的编程语言,现归属于ORACLE公司 JVM[Java virtual machine]:Java虚拟机,Java技术的核心,实现Java的跨平台,包含Java运行环境JRE,Java工具和Java基础类库. JDK[Java Development Kit]:Java的软件开发工具包,在JDK的安装目录下有一个jre目录,里面有两个文件夹bin和lib,可以理解为bin里的就是jvm,lib里的就是jvm工作所需的类库,而jvm和lib结合起来称为jre. JRE[Java Runtime Environment]:Java运行环境,包含JVM标准实现及Java核心类库(不是开发环境,不包含开发工具,例如编译器,调试器). Java 编译:Java语言编写的源程序,先通过Java编译器,编译成与平台无关的’字节码程序’(.class文件,二进制程序)然后通过Java解释器 解释执行. 12javac hello.java #编译成字节码文件.java hello #解释字节码. 运算符 算术运算符、位运算符、逻辑运算符、关系运算符 位运算符 名称 描述 举例 &amp; 按位与 如果相对应位都是 1，则结果为 1，否则为 0 （a＆b），得到 12，即 0000 1100 丨 按位或 如果相对应位都是 0，则结果为 0，否则为 1 （ a 丨 b ）得到 61，即 0011 1101 ^ 按位异或 如果相对应位值相同，则结果为 0，否则为 1 （a^b）得到 49，即 0011 0001 ~ 按位补 翻转操作数的每一位，即 0 变成 1，1 变成 0 （~a）得到 -61，即 1100 0011 &lt;&lt; 按位左移 左操作数按位左移右操作数指定的位数 a&lt;&lt;2 得到 240，即 1111 0000 &gt;&gt; 按位右移 左操作数按位右移右操作数指定的位数 a&gt;&gt;2 得到 15 即 1111 &gt;&gt;&gt; 按位右移补零 左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充 a&gt;&gt;&gt;2 得到 15 即 0000 1111 逻辑运算符 名称 描述 类型 举例 &amp;&amp; 或 &amp; 与 当且仅当两个操作数都为真，条件才为真 双目运算符 (a &amp;&amp; b) 或 (a &amp; b) 为假 || 或 | 或 两个操作数任何一个为真，条件为真 双目运算符 （a || b) 或 (a | b) 为真 ! 非 用来反转操作数的逻辑状态。如果条件为真，则逻辑非运算符将得到假 单目运算符 （!a）为假 ^ 异或 如果两个操作数逻辑相同，则结果为假，否则为真 双目运算符 (a ^ b) 为真 运算符优先级： 基本数据类型基本数据类型是CPU可以直接进行运算的类型。Java定义了以下几种基本数据类型： 整数类型：byte，short，int，long 浮点数类型：float，double 字符类型：char 布尔类型：boolean 12345计算机内存的最小存储单元是字节（byte），一个字节就是一个8位二进制数，即8个bit。它的二进制表示范围从00000000~11111111，换算成十进制是0~255，换算成十六进制是00~ff。 1234567内存单元从0开始编号，称为内存地址。每个内存单元可以看作一间房间，内存地址就是门牌号。 0 1 2 3 4 5 6 ...┌───┬───┬───┬───┬───┬───┬───┐│ │ │ │ │ │ │ │...└───┴───┴───┴───┴───┴───┴───┘ 123456789一个字节是1byte，1024字节是1K，1024K是1M，1024M是1G，1024G是1T。一个拥有4T内存的计算机的字节数量就是：4T = 4 x 1024G = 4 x 1024 x 1024M = 4 x 1024 x 1024 x 1024K = 4 x 1024 x 1024 x 1024 x 1024 = 4398046511104 不同的数据类型占用的字节数不一样。我们看一下Java基本数据类型占用的字节数： 1234567891011121314151617181920212223 ┌───┐ byte │ │ └───┘ ┌───┬───┐ short │ │ │ └───┴───┘ ┌───┬───┬───┬───┐ int │ │ │ │ │ └───┴───┴───┴───┘ ┌───┬───┬───┬───┬───┬───┬───┬───┐ long │ │ │ │ │ │ │ │ │ └───┴───┴───┴───┴───┴───┴───┴───┘ ┌───┬───┬───┬───┐ float │ │ │ │ │ └───┴───┴───┴───┘ ┌───┬───┬───┬───┬───┬───┬───┬───┐double │ │ │ │ │ │ │ │ │ └───┴───┴───┴───┴───┴───┴───┴───┘ ┌───┬───┐ char │ │ │ └───┴───┘ byte恰好就是一个字节，而long和double需要8个字节。 对于整型类型，Java只定义了带符号的整型，因此，最高位的bit表示符号位（0表示正数，1表示负数）。各种整型能表示的最大范围如下： byte：-128 ~ 127 short: -32768 ~ 32767 int: -2147483648 ~ 2147483647 long: -9223372036854775808 ~ 9223372036854775807 浮点型浮点类型的数就是小数，因为小数用科学计数法表示的时候，小数点是可以“浮动”的，如1234.5可以表示成12.345x102，也可以表示成1.2345x103，所以称为浮点数。 下面是定义浮点数的例子： 12345float f1 = 3.14f;float f2 = 3.14e38f; // 科学计数法表示的3.14x10^38double d = 1.79e308;double d2 = -1.79e308;double d3 = 4.9e-324; // 科学计数法表示的4.9x10^-324 对于float类型，需要加上f后缀。 浮点数可表示的范围非常大，float类型可最大表示3.4x1038，而double类型可最大表示1.79x10308。 布尔类型布尔类型boolean只有true和false两个值，布尔类型总是关系运算的计算结果： 12345boolean b1 = true;boolean b2 = false;boolean isGreater = 5 &gt; 3; // 计算结果为trueint age = 12;boolean isAdult = age &gt;= 18; // 计算结果为false Java语言对布尔类型的存储并没有做规定，因为理论上存储布尔类型只需要1 bit，但是通常JVM内部会把boolean表示为4字节整数。 字符类型字符类型char表示一个字符。Java的char类型除了可表示标准的ASCII外，还可以表示一个Unicode字符：注意char类型使用单引号’，且仅有一个字符，要和双引号”的字符串类型区分开。 引用类型除了上述基本类型的变量，剩下的都是引用类型。例如，引用类型最常用的就是String字符串： String s = “hello”;引用类型的变量类似于C语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置，后续我们介绍类的概念时会详细讨论。 常量定义变量的时候，如果加上final修饰符，这个变量就变成了常量： 1234final double PI = 3.14; // PI是一个常量double r = 5.0;double area = PI * r * r;PI = 300; // compile error! 常量在定义时进行初始化后就不可再次赋值，再次赋值会导致编译错误。 常量的作用是用有意义的变量名来避免魔术数字（Magic number），例如，不要在代码中到处写3.14，而是定义一个常量。如果将来需要提高计算精度，我们只需要在常量的定义处修改，例如，改成3.1416，而不必在所有地方替换3.14。 根据习惯，常量名通常全部大写。 var关键字有些时候，类型的名字太长，写起来比较麻烦。例如： StringBuilder sb = new StringBuilder();这个时候，如果想省略变量类型，可以使用var关键字： var sb = new StringBuilder();编译器会根据赋值语句自动推断出变量sb的类型是StringBuilder。对编译器来说，语句： var sb = new StringBuilder();实际上会自动变成： StringBuilder sb = new StringBuilder();因此，使用var定义变量，仅仅是少写了变量类型而已。 命名规范#####规范是为了可读性，不是强制措施。1,项目名全部小写2,包名全部小写，点分隔符之间有且仅有一个自然语义的英语单词，包名统一单数形式，但类名如果有复数含义，类名可以用复数形式3,类名首字母大写,其余组成词首字母依次大写4,变量名,参数名，方法名首字母小写，如果名称由多个单词组成，除首字母外的每个单词的首字母都要大写5.常量名全部大写，单词间下划线隔开。6，命名规范遵从以下原则： 名称只能由字母、下划线、数字、$符号组成。 不能以数字开头 名称不能使用Java中的关键字 不允许出现中文及拼音命名 7.抽象类名使用Abstract或Base开头，异常类命名使用Exception结尾；测试类名要以测试的类的名称开始，以Test结尾。例：AbstractClass、CommonException、DemoTest.8.枚举类名带上Enum后缀，枚举成员名称需要全大写，单词间用下划线隔开。例：枚举名字为ProcessStatusEnum的成员名称：SUCCESS 、 UNKNOWN_REASON 上转型在继承关系中,会存在对象的上转型关系,例如 父类People,子类Asian, 123People zhang= new People();Asian li =new Asian();zhang=li; //称对象zhang是对象li的上转型对象 上转型对象不能操纵子类的新增成员,不能调用子类的新增方法 上转型对象可以访问子类继承或隐藏的成员变量,可以调用子类继承或重写的实例方法, 子类如果重写了父类的静态方法,那么子类对象的上转型对象不能调用子类重写的静态方法,只能调用父类的静态方法 上转型对象可以被强制转化为子类对象, 抽象类使用abstract修饰的类称为abstract类, abstract类不能用new运算符创建该类对象 非抽象类中不能有abstract方法 abstract 类的子类 其子类为非abstract类,则必须重写父类的abstract方法,给出方法体,若为abstract类,可以继承,也可以重写使用abstract修饰的方法称为abstract方法, 不允许使用final与abstract同时修饰一个类和方法, 不允许使用static修饰abstract方法, abstract方法必须是实例方法 方法类型前有static的为类方法，反之则为实例方法 实例方法在对象被创建后,被加载, 类方法在类文件加载到内存时就已经创建 abstract方法,只允许声明,不允许实现 蓝桥杯 B组,求黄金分割率(0.618)精确到100位小数.Java中,提供的最大整形范围是64位 long型整数 java中能处理大数的类有两个,位于java.math包中,导入语句import java.math.*; 高精度大整数: BigInteger. 内部用一个int[] 数组来模拟一个非常大的整数.BigInteger.ONE… ZERO.. TEN分别代表1,0,10, 赋值示例 12345BigInteger b=new BigInteger(&quot;1234567890&quot;);BigInteger c=new BigInteger.ONE;BigInteger d=new BigInteger.ZERO;BigInteger e=BigInteger.valueOf(2);sysout(b.pow(5)); //此处简打输出函数 对BigInteger做运算的时候,只能使用实例方法add,multiply,divide,mod,subtract,abs,pow,gcd,compareTo.不能使用算术运算符(如+,-,*) 12BigInteger a=c.add(b); // a=c+bBigInteger f=d.multiply(b.add(BigInteger.valueOf(8))) //f=d*(b+8) 和long型整数运算比，BigInteger不会有范围限制，但缺点是速度比较慢。 也可以把BigInteger转换成long型： 123BigInteger i = new BigInteger(&quot;123456789000&quot;);System.out.println(i.longValue()); // 123456789000System.out.println(i.multiply(i).longValueExact()); // java.lang.ArithmeticException: BigInteger out of long range 使用longValueExact()方法时，如果超出了long型的范围，会抛出ArithmeticException。 BigInteger和Integer、Long一样，也是不可变类，并且也继承自Number类。因为Number定义了转换为基本类型的几个方法： 转换为byte：byteValue() 转换为short：shortValue() 转换为int：intValue() 转换为long：longValue() 转换为float：floatValue() 转换为double：doubleValue() 因此，通过上述方法，可以把BigInteger转换成基本类型。如果BigInteger表示的范围超过了基本类型的范围，转换时将丢失高位信息，即结果不一定是准确的。如果需要准确地转换成基本类型，可以使用intValueExact()、longValueExact()等方法，在转换时如果超出范围，将直接抛出ArithmeticException异常。 高精度浮点数: BigDecimal BigDecimal用scale()表示小数位数,eg: 1234BigDecimal d1=new BigDecimal(&quot;12345.67890&quot;)BigDecimal d2=new BigDecimal(&quot;1234.5&quot;)sysout(d1.scale())// 输出5sysout(d2.scale())//输出1 stripTrailingZeros()方法可以将一个BigDecimal格式化为一个相等的,但去掉了末尾0的BigDecimal; 123456789BigDecimal d1 = new BigDecimal(&quot;123.4500&quot;);BigDecimal d2 = d1.stripTrailingZeros();System.out.println(d1.scale()); // 4System.out.println(d2.scale()); // 2,因为去掉了00BigDecimal d3 = new BigDecimal(&quot;1234500&quot;);BigDecimal d4 = d3.stripTrailingZeros();System.out.println(d3.scale()); // 0System.out.println(d4.scale()); // -2 例子转自廖雪峰 如果一个BigDecimal的scale()返回负数,例如,-2,表示这个数是个整数,并且末尾有2个0 BigDecimal 设置小数位长度 BigDecimal.setScale()方法用于格式化小数点 setScale(1)表示保留一位小数,默认用四舍五入方式 setScale(1,BigDecimal.ROUND_DOWN) //直接删除多余的小数位,如1.23-&gt;1.2 setScale(1,BigDecimal.ROUND_UP) //进位处理,如1.23-&gt;1.2 setScale(1,BigDecimal.ROUND_HALF_UP) //四舍五入 setScale(1,BigDecimal.ROUND_HALF_DOWN) //四舍五入,小数位是5则是向下舍 Java 四舍五入:观察前一位奇偶性,奇数,5入;偶数,5舍 dividerAndRemainder()方法,返回数组包含两个BigDecimal,分别是商和余数 capareTo()比较两个BigDecimal的值是否相等,而不能使用equals();","link":"/2020/04/01/Java%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7/"},{"title":"python GIL","text":"CPython 中的 GIL：影响与应对方法 Python 官方文档 global interpreter lock:The mechanism used by the CPython interpreter to assure that only one thread executes Python bytecode at a time. This simplifies the CPython implementation by making the object model (including critical built-in types such as dict) implicitly safe against concurrent access. Locking the entire interpreter makes it easier for the interpreter to be multi-threaded, at the expense of much of the parallelism afforded by multi-processor machines. However, some extension modules, either standard or third-party, are designed so as to release the GIL when doing computationally intensive tasks such as compression or hashing. Also, the GIL is always released when doing I/O. Past efforts to create a “free-threaded” interpreter (one which locks shared data at a much finer granularity) have not been successful because performance suffered in the common single-processor case. It is believed that overcoming this performance issue would make the implementation much more complicated and therefore costlier to maintain. 全局解释程序锁：全局解释程序锁（GIL）是 CPython 解释器的一个特性，确保一次只有一个线程可以执行 Python 字节码。GIL 的存在简化了 CPython 的实现，通过隐式地为对象模型提供并发访问安全性，甚至包括关键的内置类型，如字典。虽然全局解释程序锁会限制多线程环境中并行执行的能力，但通过将同步复杂性集中到解释器级别，它使得解释器更容易支持多线程。然而，这也导致多核处理器提供的并行性大部分被消耗。不过，一些扩展模块（无论是标准的还是第三方的）被设计为在执行计算密集型任务（如压缩或散列）时会释放 GIL。此外，在执行 I/O 操作时，GIL 总是会被释放。过去创建“自由线程”解释器（以更细的粒度锁定共享数据的解释器）的努力没有成功，因为在常见的单处理器情况下性能受到影响。据信，克服该性能问题将使实现复杂得多，并且因此维护成本更高。 不同 Python 解释器的特点及 GIL 影响 Python 生态系统中有多种 Python 解释器实现，每个实现都有其独特的特点： CPython：作为 Python 的标准解释器，使用 C 语言开发，对 Python 语言特性的支持最全面，广泛被使用。 Jython：基于 Java 开发，能够将 Python 代码编译为 Java 字节码，运行在 JVM 上，且可以调用 Java 库。 IronPython：使用 C# 开发，运行在 .NET 平台上，可以调用 C# 库和 .NET 框架。 PyPy：使用 Python 开发，通过 JIT 技术提高执行效率，与 CPython 兼容性较好。 Cython：并非独立的解释器，而是一种能够将 Python 扩展为可编译成 C 语言的语法扩展，可以生成 C 语言代码以提高效率，需要编译后才能在 CPython 中使用。 还有其他实现如 Stackless Python、MicroPython 等。 CPython 作为使用 C 语言开发的标准解释器，存在全局解释器锁（GIL）的问题，从而导致多线程无法充分利用多核 CPU。 Jython 和 IronPython：由于基于 Java 和 .NET 运行时，不存在 GIL 问题，可以在多核 CPU 上充分发挥优势。 PyPy：虽然 PyPy 也有 GIL，但其使用 JIT 编译技术，部分优化了 GIL 带来的问题。 Cython：Cython 本身并非独立的解释器，但它可以通过编译成 C 语言的扩展来提高 Python 解释器的效率，不受 GIL 影响。 为什么 CPython 中存在 GIL？ CPython 中存在全局解释器锁（GIL）的主要原因是其历史和设计初衷。 历史背景： Python 最初在单核 CPU 时代诞生，其设计初衷并未考虑多线程并发执行的场景。在此背景下，设计师并没有着重解决多线程竞争问题。 引用计数内存管理机制： CPython 主要使用引用计数内存管理机制。然而，这种机制并不是线程安全的。具体而言，引用计数机制在多线程环境中容易出现问题，多个线程同时对对象引用计数进行增减操作可能引发竞争条件和线程安全问题。 为了避免这些问题，CPython 在执行 Python 字节码时引入了 GIL。这个机制确保同一时刻只有一个线程可以执行 Python 字节码，从而简化了内存管理。然而，这也限制了在多核 CPU 下实现真正的并发执行。 尽管 GIL 在某些情况下降低了多线程编程的便利性，但它在某些方面也有好处，例如在 I/O 密集型任务中释放 GIL，允许其他线程执行。 CPython 使用 C 扩展库： CPython 广泛使用 C 语言扩展库来提升性能。在多线程环境下，C 扩展库需要自己实现线程同步，这可能增加复杂性和错误的可能性。 降低 GIL 影响的方法： 降低 GIL 影响的策略包括但不限于以下方法： 利用多进程充分利用多核 CPU，从而避免 GIL 的限制。 使用异步编程来优化 I/O 密集型应用的并发性。 使用 C 扩展库或 Cython 优化计算密集型代码的执行效率。 利用 multiprocessing 模块提供的进程池实现多进程并发。 考虑使用无 GIL 的解释器，如 Jython、IronPython。 使用并行计算框架如 Dask、Joblib 支持并行计算。 优化算法和数据结构以减少竞争锁的使用。 分离计算密集型代码和 I/O 操作，充分利用 GIL 的释放。 对于 I/O 密集型任务，使用多线程优化而非计算密集型任务。 合理设置线程数量，避免过多线程竞争。 使用原生线程或 asyncio 等作为并发手段。 在适当的情况下使用共享内存和消息传递，减少锁的竞争。","link":"/2022/10/13/Python-GIL/"},{"title":"MBTI(迈尔斯布里格斯类型指标)","text":"最近刷知乎,不时看到关于intp,intj人格的问题. 刚开始看到的时候感觉这和星座差不多,模棱两可，真正发现内心的自己确实有点难度。 我还是把这几种人格的表格列一下吧,权当故事看.(表格来源 百度百科) 今天又刷到一则学生跳楼的新闻,也许有时候把人分为不同的性格,以相应的方式分别对待会好点吧,人就是这么脆弱. 以前以为人可以掌控自己的性格,自己的情绪,现在也同样如此.但是真正到自己面临时,却又很难走出来. 迈尔斯布里格斯类型指标（MBTI）表中人的性格，是美国心理学家伊莎贝尔·布里格斯·迈尔斯和她的母亲凯瑟琳·库克·布里格斯制定的。 该指标以瑞士心理学家荣格划分的8种类型为基础，经过二十多年的研究后，编制成了《迈尔斯-布里格斯类型指标》，从而把荣格的类型理论付诸实践。迈尔斯在荣格的优势功能和劣势功能、主导功能和从属功能等概念的基础上，进一步提出功能等级等概念，并有效的为每一种类型确定了其功能等级的次序，又提出了类型的终生发展理论，形成四个维度。约翰.毕比博士在《类型与原型》中，将心理类型理论和原型理论系统地结合在一起。华南师范大学申荷永教授将心理类型引进了中国并加以扩展。这四个维度就是四把标尺，每个人的性格都会落在标尺的某个点上，这个点靠近哪个端点，就意味着这个人就有哪方面的偏好. 类型名称 相对应英文字母简称 类型名称 相对应英文字母简称 内倾感觉思维判断 （ISTJ） 内倾感觉情感判断 （ISFJ） 内倾直觉情感判断 （INFJ） 内倾直觉思维判断 （INTJ） 内倾感觉思维知觉 （ISTP） 内倾感觉情感知觉 （ISFP） 内倾直觉情感知觉 （INFP） 内倾直觉思维知觉 （INTP） 外倾感觉思维判断 （ESTJ） 外倾感觉情感判断 （ESFJ） 外倾直觉情感判断 （ENFJ） 外倾直觉思维判断 （ENTJ） 外倾感觉思维知觉 （ESTP） 外倾感觉情感知觉 （ESFP） 外倾直觉情感知觉 （ENFP） 外倾直觉思维知觉 （ENTP） 十六种人格 维度 类型 相对应类型英文及缩写 类型 相对应类型英文缩写 注意力方向（精力来源） 外倾（外向） E（Extrovert） 内倾（内向） I（Introvert） 认知方式（如何搜集信息） 实感（感觉） S（Sensing） 直觉（直觉） N（iNtuition） 判断方式（如何做决定） 思维（理性） T（Thinking） 情感（感性） F（Feeling） 生活方式（如何应对外部世界） 判断（主观） J（Judgement） 知觉（客观） P（Perceiving） 外倾型（E） 内倾型（I） 与他人相处时精力充沛 独处时精力充沛 行动先于思考 思考先于行动 喜欢边想边说出声 在心中思考问题 易于“读”和了解；随意地分享个人情况 更封闭，更愿意在经挑选的小群体中分享个人的情况 说的多于听的 听的比说的多 高度热情地社交 不把兴奋说出来 反应快，喜欢快节奏 仔细考虑后，才有所反应 重于广度而不是深度（心理能量的获得途径和与外界相互作用的程度） 喜欢深度而不是广度（心理能量的获得途径和与外界相互作用的程度） 感觉型（S） 直觉型（N） 相信确定和有形的东西 相信灵感或推理 对概念和理论兴趣不大，除非它们有着实际的效用 对概念和理论感兴趣 重视现实性和常情 重视可能性和独创性 喜欢使用和琢磨已知的技能 喜欢学习新技能，但掌握之后很容易就厌倦了 留意具体的、特定的事物；进行细节描述 留意事物的整体概况、普遍规律及象征含义；用概括、隐喻等方式进行表述 循序渐进地讲述有关情况 跳跃性地展现事实 着眼于现实 着眼于未来，留意事物的变化趋势，惯于从长远角度看待事物 喜欢深度而不是广度（接受信息上） 重于广度而不是深度（接受信息上） 思维型（T） 情感型（F） 退后一步思考，对问题进行客观的、非个人立场的分析 超前思考，考虑行为对他人的影响 重视符合逻辑、公正、公平的价值；一视同仁 重视同情与和睦：重视准则的例外性 被认为冷酷、麻木、漠不关心 被认为感情过多，缺少逻辑性，软弱 认为坦率比圆通更重要 认为圆通比坦率更重要 只有当情感符合逻辑时，才认为它可取 无论是否有意义，认为任何感情都可取 被“获取成就”所激励 被“获得欣赏”所激励 很自然地看到缺点，倾向于批评 惯于迎合他人，着重维护人脉资源 判断型（J） 知觉型（P） 做了决定后最为高兴 当各种选择都存在时，感到高兴 有“工作原则”：工作第一，玩其次（如果有时间的话） “玩的原则”：现在享受，然后再完成工作（如果有时间的话） 建立目标，准时地完成 随着新信息的获取，不断改变目标 愿意知道它们将面对的情况 喜欢适应新情况 着重结果（重点在于完成任务） 着重过程（重点在于如何完成工作） 满足感来源于完成计划 满足感来源于计划的开始 把时间看作有限的资源，认真地对待最后期限 认为时间是可更新的资源，而且最后期限也是有收缩的 人格类型ISTJ1.严肃、安静、藉由集中心志与全力投入、及可被信赖获致成功。 2.行事务实、有序、实际、逻辑、真实及可信赖。 3.十分留意且乐于任何事（工作、居家、生活均有良好组织及有序）。 4.负责任。 5.照设定成效来作出决策且不畏阻挠与闲言会坚定为之。 6.重视传统与忠诚。 7.传统性的思考者或经理。 ISFJ1.安静、和善、负责任且有良心。 2.行事尽责投入。 3.安定性高，常居项目工作或团体之安定力量。 4.愿投入、吃苦及力求精确。 5.兴趣通常不在于科技方面。对细节事务有耐心。 6.忠诚、考虑周到、知性且会关切他人感受。 7.致力于创构有序及和谐的工作与家庭环境。 INFJ1.因为坚忍、创意及必须达成的意图而能成功。 2.会在工作中投注最大的努力。 3.默默强力的、诚挚的及用心的关切他人。 4.因坚守原则而受敬重。 5.提出造福大众利益的明确远景而为人所尊敬与追随。 6.追求创见、关系及物质财物的意义及关联。 7.想了解什么能激励别人及对他人具洞察力。 8.光明正大且坚信其价值观。 9.有组织且果断地履行其愿景。 INTJ1.具强大动力与本意来达成目的与创意—固执顽固者。 2.有宏大的愿景且能快速在众多外界事件中找出有意义的模范。 3.对所承负职务，具良好能力于策划工作并完成。 4.具怀疑心、挑剔性、独立性、果决，对专业水准及绩效要求高。 ISTP1.冷静旁观者—安静、预留余地、弹性及会以无偏见的好奇心与未预期原始的幽默观察与分析。 2.有兴趣于探索原因及效果，技术事件是为何及如何运作且使用逻辑的原理组构事实、重视效能。 3.擅长于掌握问题核心及找出解决方式。 4.分析成事的缘由且能实时由大量资料中找出实际问题的核心。 ISFP1.羞怯的、安宁和善地、敏感的、亲切的、且行事谦虚。 2.喜于避开争论，不对他人强加已见或价值观。 3.无意于领导却常是忠诚的追随者。 4.办事不急躁，安于现状无意于以过度的急切或努力破坏现况，且非成果导向。 5.喜欢有自有的空间及照自订的时程办事。 INFP1安静观察者，具理想性与对其价值观及重要之人具忠诚心。 2.希望在生活形态与内在价值观相吻合。 3.具好奇心且很快能看出机会所在。常担负开发创意的触媒者。 4.除非价值观受侵犯，行事会具弹性、适应力高且承受力强。 5.具想了解及发展他人潜能的企图。想作太多且作事全神贯注。 6.对所处境遇及拥有不太在意。 7.具适应力、有弹性除非价值观受到威胁。 INTP1.安静、自持、弹性及具适应力。 2.特别喜爱追求理论与科学事理。 3.习于以逻辑及分析来解决问题—问题解决者。 4.最有兴趣于创意事务及特定工作，对聚会与闲聊无大兴趣。 5.追求可发挥个人强烈兴趣的生涯。 6.追求发展对有兴趣事务之逻辑解释。 ESTP1.擅长现场实时解决问题—解决问题者。 2.喜欢办事并乐于其中及过程。 3.倾向于喜好技术事务及运动，交结同好友人。 4.具适应性、容忍度、务实性；投注心力于会很快具成效工作。 5.不喜欢冗长概念的解释及理论。 6.最专精于可操作、处理、分解或组合的真实事务。 ESFP1.外向、和善、接受性、乐于分享喜乐予他人。 2.喜欢与他人一起行动且促成事件发生，在学习时亦然。 3.知晓事件未来的发展并会热列参与。 4.最擅长于人际相处能力及具备完备常识，很有弹性能立即适应他人与环境。 5.对生命、人、物质享受的热爱者。 ENFP1.充满热忱、活力充沛、聪明的、富有想象力的，生命中充满机会且其能很快得到他人肯定与支持。 2.几乎能达成所有有兴趣的事。 3.对难题很快就有对策并能对有困难的人施予援手。 4.依赖能改善的能力而无须预作规划准备。 5.为达目的常能找出强制自己为之的理由。 6.即兴执行者。 ENTP1.反应快、聪明、长于多样事务。 2.具激励伙伴、敏捷及直言讳专长。 3.会为了有趣对问题的两面加予争辩。 4.对解决新及挑战性的问题富有策略，但会轻忽或厌烦经常的任务与细节。 5.兴趣多元，易倾向于转移至新生的兴趣。 6.对所想要的会有技巧地找出逻辑的理由。 7.长于看清楚他人，有智能去解决新或有挑战的问题。 ESTJ1.务实、真实、事实倾向，具企业或技术天份。 2.不喜欢抽象理论；最喜欢学习可立即运用事理。 3.喜好组织与管理活动且专注以最有效率方式行事以达致成效。 4.具决断力、关注细节且很快作出决策—优秀行政者。 5.会忽略他人感受。 6.喜作领导者或企业主管。 7.做事风格比较偏向于权威指挥性。 ESFJ1.诚挚、爱说话、合作性高、受欢迎、光明正大的—天生的合作者及活跃的组织成员。 2.重和谐且长于创造和谐。 3.常作对他人有益事务。 4.给予鼓励及称许会有更佳工作成效。 5.最有兴趣于会直接及有形影响人们生活的事务。 6.喜欢与他人共事去精确且准时地完成工作。 ENFJ1.热忱、易感应及负责任的、具有能鼓励他人的领导风格。 2.对别人所想或希求会表达真正关切且切实用心去处理。 3.能怡然且技巧性地带领团体讨论或演示文稿提案。 4.爱交际、受欢迎及富同情心。 5.对称许及批评很在意。 6.喜欢带引别人且能使别人或团体发挥潜能。 ENTJ1.坦诚、具决策力的活动领导者。 2.长于发展与实施广泛的系统以解决组织的问题。 3.专精于具内涵与智能的谈话如对公众演讲。 4.乐于经常吸收新知且能广开信息管道。 5.易生过度自信，会强于表达自已创见。 6.喜于长程策划及目标设定。","link":"/2020/10/15/MBTI/"},{"title":"Python浅拷贝、深拷贝与赋值","text":"首先是python的基本数据类型： Number(数字) String(字符串) bool(布尔类型) List(列表) Tuple(元组) Set(集合) Dictory(字典) 不可变类型：Number(数字) Tuple(元组) String(字符串) bool(布尔类型) 可变类型：List(列表)Set(集合)Dictory(字典) 可变类型与不可变类型对比1234a = 45print(id(a)) # 94458411934400a = 56print(id(a)) # 94458411934752 在上述代码中，我们对变量a进行了赋值操作。初始时，变量a引用整数对象45，其内存地址为94458411934400。然后，我们将a赋值为56，此时会新开辟内存空间存储整数对象56，并将变量a重新指向该内存地址，其内存地址变为94458411934752。这是因为不可变类型（如整数）在值发生变化时会创建新的对象，而不是修改原有对象。 1234b = [1, 2, 3]print(id(b)) # 139680049341440b.append(5)print(id(b)) # 139680049341440 在上述代码中，我们创建了一个列表对象b，初始时包含元素[1, 2, 3]，其内存地址为139680049341440。然后，我们使用append方法向列表b中添加元素5。由于列表是可变类型，添加元素并不会创建新的对象，而是在原有对象的内存空间上进行修改，因此列表b的内存地址保持不变。 通过以上代码示例，我们可以看出不可变类型在值发生变化时会创建新的对象并修改变量的引用，而可变类型在修改值时会直接在原有对象的内存空间上进行操作，不改变变量的引用。 python中的变量声明是动态的，变量的类型是根据赋值自动推断的，不需要显示指定变量的类型。 123456789101112直接赋值：是对象的引用a = 10000# 创建一个整数对象10000，在内存中分配一块空间用于存储它的值，并将创建的对象与变量a相关联，变量a引用了该对象b = a# 变量b被赋值为变量a，b引用了与变量a相同的地址，指向同一个整数对象c = 10000# 变量c被赋值为10000，又创建了一个新的整数对象，并将变量c与该对象相关联print(id(a)) # 139680049769968print(id(b)) # 139680049769968# 变量a和变量b指向相同的对象，它们的内存地址是相同的print(id(c)) # 139680049766704# 变量c指向新的对象，因此它的内存地址与变量a和变量b不同 在上述代码中，变量a、b和c都被赋值为整数对象10000，但是变量a和变量b指向同一个对象，它们的内存地址是相同的，而变量c则指向一个新的对象，因此其内存地址与变量a和变量b不同。 需要注意的是，变量在赋值时实际上是引用了对象，而不是直接存储对象的值。这意味着变量可以引用不同类型的对象，因为类型是根据对象自动推断的。 浅拷贝与深拷贝在Python中，我们可以使用浅拷贝和深拷贝来复制对象，Python中的拷贝操作可以使用copy模块中的copy函数进行浅拷贝，使用copy模块中的deepcopy函数进行深拷贝。它们的区别在于： 浅拷贝：创建一个新的对象，然后将原始对象的引用复制给新对象，这样原始对象和新对象将引用同一个内存地址，它们指向相同的对象。只拷贝父对象本身，不会拷贝父对象的子对象 深拷贝：创建一个新对象，并递归的复制原始对象及子对象。深拷贝会创建一个独立的对象，即新对象和原始对象是独立的，它们拥有不同的内存地址。深拷贝会完全拷贝父对象及子对象 123456789#浅拷贝与深拷贝import copya=[100,2,3]b=copy.copy(a)c=copy.deepcopy(b)a.append(5)print(id(a))#139679863695488print(id(b))#139679863460160print(id(c))#139679863461632 观察输出结果可以发现： 列表a发生了变化，添加了一个新的元素5。 列表b保持不变，它仍然是原始的浅拷贝，因此不会受到a的修改的影响。 列表c也保持不变，它是原始的深拷贝，因此不会受到a的修改的影响。 打印出的内存地址（id）可以看到，a、b和c指向的是不同的内存空间，它们是相互独立的对象。 这个例子展示了浅拷贝和深拷贝的不同行为。浅拷贝只复制了对象的引用，而深拷贝递归地复制了整个对象及其子对象。因此，在修改原始对象时，浅拷贝不会受到影响，而深拷贝则是完全独立的副本。 12345import copya = [[100, 4, 8], 2, 3]b = copy.copy(a)c = copy.deepcopy(b)a[0].append(5) 输出结果如下： 123456[[100, 4, 8, 5], 2, 3][[100, 4, 8, 5], 2, 3][[100, 4, 8], 2, 3]139679893614720139679893614720139679893614592 从输出结果可以观察到以下情况： 列表 a 的第一个元素是一个嵌套列表 [100, 4, 8]，在进行浅拷贝后，列表 b 也引用了相同的嵌套列表对象。因此，对 a[0] 进行修改会影响到 b[0]，导致它们的值都增加了 5。 使用深拷贝 copy.deepcopy() 创建的列表 c，在进行修改时并不会影响原始的列表 a 和浅拷贝的列表 b。因此，c[0] 的值保持不变。 尽管 a[0] 和 b[0] 的值相同，但它们的内存地址是不同的。 综上所述，浅拷贝只复制了列表对象的引用，因此对可变对象的修改会影响到原始对象和浅拷贝对象。而深拷贝创建了原始对象及其所有嵌套对象的独立副本，因此对副本的修改不会影响到原始对象。此外，内存地址的不同也说明了它们是不同的对象。","link":"/2022/06/07/Python%E6%B5%85%E6%8B%B7%E8%B4%9D%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E8%B5%8B%E5%80%BC/"},{"title":"Python迭代器与生成器","text":"Python 迭代器和生成器Python 中的迭代器和生成器是用于处理可迭代对象的强大工具。它们有一些共同点，但也有一些重要的区别。 迭代器（Iterators）： 迭代器是可迭代对象的一个子集。 它是一个可以记住遍历位置的对象。 迭代器需要实现 __iter__() 和 __next__() 方法。 使用 iter() 方法可以将列表、元组、集合、字符串等可迭代对象转换为迭代器。 通过调用 next() 方法逐个访问元素。 不能通过索引来访问生成器的元素。 当没有更多元素可迭代时，next() 方法会引发 StopIteration 异常。 1234567891011121314# 创建一个可迭代对象（列表）my_list = [1, 2, 3, 4, 5]# 使用iter()方法将可迭代对象转换为迭代器my_iterator = iter(my_list)# 使用next()方法逐个访问迭代器的元素try: while True: element = next(my_iterator) print(element)except StopIteration: pass 在这个示例中，将列表my_list转换为迭代器my_iterator，然后使用next()方法逐个访问迭代器的元素。当没有更多的元素可迭代时，next()方法会引发StopIteration异常，我们通过异常处理来结束循环。 生成器（Generators）： 生成器是一种特殊的迭代器。 使用 yield 关键字替代 return 返回值，将函数变成生成器对象。 生成器不会一次性生成所有值，而是按需生成每个值，这可以节省内存。 生成器只能被迭代一次，一旦耗尽，需要重新创建或重新初始化才能再次迭代。 不能通过索引来访问生成器的元素。 生成器是生成元素的，迭代器是访问集合元素的一种方式。 1234567891011121314151617# 创建一个生成器函数def my_generator(): yield 1 yield 2 yield 3# 使用生成器函数创建生成器对象gen = my_generator()# 迭代生成器并按需生成值for value in gen: print(value)# 尝试再次迭代，会发现生成器已经耗尽for value in gen: print(value) # 不会打印任何内容，因为生成器已经耗尽 迭代器用于按需访问集合元素，而生成器用于按需生成元素","link":"/2022/09/02/Python%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/"},{"title":"Python魔术方法","text":"Python常用的魔术方法有 __init__,对象被创建后调用，用于初始化对象的属性。 __new__,对象被创建之前被调用， __str__,用于打印该对象展示给用户的字符串信息。 __repr__,用于开发调试时，给开发人员看的打印对象的详细信息 __len__,用于获取容器对象的元素个数。 __call__,允许对象像函数一样被调用，可以传递参数。 __iter__,返回一个迭代器，允许对象成为一个可以迭代的容器，常和__next__一起使用，","link":"/2020/04/08/Python%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"},{"title":"SQL Server","text":"候选码: 该属性或者属性组可以唯一的标识一个元组,而其子集不能 主码: 若一个关系有多个候选码,则选定其中一个作为主码 全码: 若此关系中,候选码的组成为该关系元组的全集,则称其为全码 外键: 表的外键为另一个表的主键,外键可以重复 ||为空值 主码: 保证数据完整性 外键: 和其它表建立联系 索引: 提高查询排序速度 1234建立索引: CREATE [UNIQUE] [CLUSTER] INDEX&lt;索引名&gt; ON &lt;表名&gt; (&lt;列名&gt; [&lt;次序&gt;] [,&lt;列名&gt;[&lt;次序&gt;]]....) # UNIQUE 此索引的每一个索引值只对应唯一的数据记录# CLUSTER 建立的索引是聚簇索引删除索引: DROP INDEX &lt;索引名&gt; ON &lt;表名&gt;修改索引: ALTER INDEX &lt;旧索引名&gt; RENAME TO &lt;新索引名&gt; 1234567891011121314GO是批处理的标志，是一条或多条SQL语句的集合，SQL Server将批处理语句编译成一个可执行单元，此单元称为执行计划。GO语句把程序分成一个个代码块，即使一个代码块执行错误，它后面的代码块任然会执行。每个被GO分隔的语句都是独立的事务，一个语句执行失败不会影响其它语句执行：go select * from dbo.XXX go select * from dbo.sales 第一个查询失败了，第二查询的结果依旧会返回也就是说，go前面失败的语句，不影响后面语句的执行。也可以go N select * from dbo.sales N是常数，代表以下语句重复执行N次 ​ 12345678910modify alter不同modify：只能修改字段的属性。alter：除了修改字段属性外，还可以做增加删除操作。二、语法不同1、modify：修改字段名使用：ALTER TABLE [表名] MODIFY [列名] [数据类型]2、alter：数据库SQL语言的修改语句，可以用来修改基本表，表示格式为：ALTER TABLE&lt;表名&gt;[改变方式]。 123关系模式: 对关系的描述. R(U,D,dom,F)#R关系名, U组成该关系的属性名集合,D属性组U中属性来自的域,dom属性向域的映象集合,F属性间的依赖关系集合,简记为 R(U)E-R模型(entity-relationship model),构成成分是实体集,","link":"/2020/09/14/SQL%20Server/"},{"title":"网络协议篇","text":"TCP（Transmission Control Protocol，传输控制协议）是位于OSI模型的传输层的一个核心协议。它通过滑动窗口机制来管理数据包的传输速率，并利用拥塞控制算法来避免网络过载，从而确保数据的可靠传输。TCP支持全双工通信，允许数据在两个方向上同时传输，使得双方可以在保持连接的同时，进行数据的发送和接收。 滑动窗口：是TCP确保数据传输效率和可靠性的关键，可以比喻为一个火车过隧道，隧道（网络带宽）的长度限制了火车（数据包）的数量。当火车成功穿越隧道（数据包确认被接受），新的火车（数据包）就可以进入隧道。这种机制帮助控制数据的流动速度和量，确认网络不会被过量的数据包淹没。 拥塞控制：可以比喻为一个交通灯系统，它监控整个网络的拥塞程度，根据当前网络的用塞成度来调整数据包的发送速率，当网络流量较轻时，它变绿灯允许更多的数据包通过，当网络流量较大时，他变红灯减少发送的数据包量，以防止数据丢失和重传。 TCP三次握手：首先客户端向服务端发送SYN（同步序列编号）报文，表示客户端希望开始通信，服务端收到报文后，回复ACK和SYN（确认应答和同步序列编号）的报文，即确认了收到了SYN报文，也表明服务端准备好通信，进入SYN_RECEIVED状态，客户端收到报文后，进入ESTABLISHED状态，向服务端发送ACK（确认应答）报文，确认收到了服务端的同步请求。这一系列交换完成后，客户端和服务端就可以正式开始通信，传输数据了。 TCP三次握手用于在客户端和服务端建立可靠连接，以便进行数据传输，这个过程包含以下三个步骤： 第一步：客户端发送一个SYN（同步序列编号）报文到服务端，携带客户端的初始序列号（比如100），表示客户端希望与服务端建立连接。可以比喻为打电话给服务端，并告知“我想开始通话，并从编号100开始计数” 第二步：服务端收到该SYN报文后，会向客户端发送ACK报文确认客户端的序列号（确认编号100+1），同时发送自己的SYN报文，包含服务端的初始序列号（比如300），准备好接受客户端从编号100开始的数据，并告知自己从300开始计数，表明服务端准备好开始通信。可以比喻为服务端回应：“我明白你从100开始计数，我也准备好了，从300开始计数” 第三步：客户端收到服务端发来的ACK和SYN报文后，发送一个ACK报文和序列号301作为回应，确认了服务端的序列号300。表示客户端准备好接受从编号300开始的数据。此时，标志着双方已准备就绪，可以比喻为：“好的，从你的300开始计数，我们可以开始通话了” TCP四次挥手用于在客户端和服务端终止数据传输，关闭连接时，包含以下四个步骤： 第一步：客户端向服务端发送一个FIN报文，序列号为100，表明客户端已经没有数据发送了，希望终止连接。可以类比为电话通话中说：“我说完了，准备挂电话” 第二步：服务端收到FIN报文后，向客户端发送确认号为101的ACK报文作为回应，确认收到客户端的终止请求。此时，服务端可能还有数据等待发送，所以连接的这一方向不能立即关闭。可以类比为通话中的回应：“我知道你说完了，但请让我说完我的部分” 第三步：服务端向发送完所有待处理的数据后，向客户端发送一个FIN报文序列号为300，表示服务端的数据已经传输完毕了，可以终止该连接。可以类比为通话中：“我的话也说完了，可以挂断电话了” 第四步，客户端收到FIN报文后，向服务端发送确认号为301的ACK报文作为回应，确认了服务端的终止请求。在发送完这个报文后，客户端会进入一个等待状态（TIME_WAIT）,等待两倍的报文最大生存时间，以确保服务端收到了这个报文，并允许网络中延迟的任何报文到达，然后彻底关闭连接。可以类比为：“我知道你也说完了，我要等一会确保没有消息遗漏，然后挂断” UDP:UDP是一种位于传输层的全双工通信协议，它的无连接性质意味着数据包可以在不建立连接的情况下直接发送至接收方，从而降低了数据传输的延迟。然而，这种协议不保证数据包的顺序或确切到达，且不会对丢失的数据包进行重发，使其在需要实时性高于可靠性的应用场景中，如视频流、在线游戏和VoIP，表现出独特的优势。","link":"/2020/04/08/TCP%20IP/"},{"title":"R语言基础语法","text":"R语言数据结构包含:向量(vector), 矩阵(matrix), 数组(array), 数据框(data frame), 列表(list). [索引从1开始] 基本向量类型六种:逻辑型(logical),整数型(integer), 实数型(double),复数型(complex),字符型(string//character), 字节型(raw).可以通过typeof(),mode(),storage.mode()查看其向量的类型 只含有一个元素的向量是标量(标量只有大小没有方向,矢量既有大小又有方向) cbind(),rbind()区别:cbind:根据列进行合并,叠加所有列.[前提行数必须相同,cbind(a,b)] {column} rbind:根据行进行合并,叠加所有行.[前提列数必须相同,rbind(a,b)] {row} methods():methods:查看其特定的类可以由哪些函数处理. eg:methods(class=lm) identical():判断向量是否相等,返回布尔值, identical(x,y). which():获取向量元素下标 which.max(),which.min(),which(a==3) 12345678910111213141516171819202122232425262728293031323334353637381. # 新建数组 2. a=c(1,3,4,5,3,2,5,6,3,2,5,6,7,5,8) 3. 4. # 取数组a中最大值的下标 5. which.max(a) 6. 7. # 取数组a中最小值的下标 8. which.min(a) 9. 10. # 取数组a中大于3值的下标 11. which(a&gt;3) 12. 13. # 取数组a中等于3值的下标 14. which(a==3) 15. 16. # 10到1的数组元素中在a中的元素的下标 17. b &lt;- which(10:1 %in% a) 18. b 19. [1] 3 4 5 6 7 8 9 10 c函数:c函数:用于合并一系列数字从而形成向量,数列[英文全拼:concatenate(把’’’连接在一起)] names():给向量的元素命名,eg:names(score)&lt;-c(“A”,”B”,”C”,”D”) 向量 seq创建向量: seq(begin=1,end=3,by=2) #间隔等于2 矩阵 矩阵生成: matrix(data= NA,nrow=1,ncol=1,byrow=FALSE,dimnames =NULL); [byrow是否按行填充矩阵,dimnames维度名称] x&lt;-matrix(c(1:12),nrow=3,ncol=4,byrow=TRUE) t(): 矩阵转置. 选取: 选取单个元素: x[2,4] 选取一行元素:x[2,] 选取多行多列元素:x[c(2,4),c(2,3)] 剔除矩阵的某行/某列元素: x[-1] #剔除第一行元素,同样适用于向量 x[-1,-2] #剔除第一行第二列的元素 行列命名: rownames(matrix) #查看矩阵行名称 colnames(matrix) #查看矩阵列名称 rownames&lt;-c(LETTERS[1:5]) #A-E为行命名 还可以通过行列名称选取相应值: x[‘A’,’B’]; dim()返回各个维度的最大值.数据框: data.frame()123456789observation&lt;-c(1:6)birthday&lt;-c(&quot;1/2&quot;,&quot;3/2&quot;,&quot;6/2&quot;,&quot;8/2&quot;,&quot;9/5&quot;,&quot;8/7&quot;)gender&lt;-c('M','M','F','F','F','M')weight&lt;-c(8.6,3.2,4.6,3.1,5.6,42.2)height&lt;-c(78,32,31,51,53,31)bloodtype&lt;-c('A','B','C','AB','O','A')breastmilk&lt;-c(TRUE,FALSE,TRUE,FALSE,TRUE,FALSE)bady&lt;-data.frame(observation,birthday,gender,weight,height,height,bloodtype,breastmilk)bady # 访问数据框中的特定变量:例如选取生日和身高的数据: bady[,c(2,5)] 或者通过变量名称获取:bady[c(‘birthday’,’height’)] ||bady[c(2,5),] bady$observation: $ 选择结果转换为向量式,从而可以绘图或计算 summary(bady$height) #计算 plot(bady$observation,bady$height,type=’h’,lwd=5,xlab=’observation’,ylab=’height(cm)’,ylim= c(60,75),main=’身高数据’) #绘图 使用$比较繁琐,也可以使用 attach()#添加数据框到R语言的查询路径123456 detach() #解除添加两个函数要成对出现` . 因子(factor) 因子是R语言中较重要的向量对象(类别变量),eg: Grade:A,B,C,D,E,F factor(x=character(),levels(),labels=levels,exclude=NA,ordered = is.ordered(x),nmax=NA) # x:向量,levels: 指定因子的水平值,ordered: 是否对因子的水平值进行排序,nmax: 水平值的上界,labels为levels添加标签,未包含于levels中需剔除的值 factors默认按字母顺序对应水平顺序 列表 list列表是一种复杂的数据结构,可以包含不同类型的元素(向量,矩阵,数组,数据框,其他类型的列表).是由一些对象的有序结合构成的对象,每个对象成为列表的分量(components),它们的长度和类型可以不相同.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&gt; student&lt;-c(&quot;John&quot;,&quot;Peter&quot;)&gt; subject&lt;-c(&quot;Math&quot;,&quot;Reading&quot;,&quot;History&quot;,&quot;Physics&quot;,&quot;Economics&quot;)&gt; listOne&lt;-list(subject,student)&gt; listOne[[1]][1] &quot;Math&quot; &quot;Reading&quot; &quot;History&quot; &quot;Physics&quot; &quot;Economics&quot;[[2]][1] &quot;John&quot; &quot;Peter&quot;&gt; listOne&lt;-list(subjectNames=subject,studentNames=student) #分别对两个对象进行命名&gt; listOne$subjectNames[1] &quot;Math&quot; &quot;Reading&quot; &quot;History&quot; &quot;Physics&quot; &quot;Economics&quot;$studentNames[1] &quot;John&quot; &quot;Peter&quot;&gt; score&lt;-matrix(c(95,80,60,72,84,58,32,65,43,49),nrow = 5,ncol = 2,dimnames = listOne) #列表对维度命名&gt; score studentNamessubjectNames John Peter Math 95 58 Reading 80 32 History 60 65 Physics 72 43 Economics 84 49&gt; x&lt;-data.frame(score,gradeJohn=factor(c(&quot;A&quot;,&quot;B&quot;,&quot;D&quot;,&quot;C&quot;,&quot;B&quot;)),gradePeter=factor(c(&quot;B&quot;,&quot;D&quot;,&quot;D&quot;,&quot;D&quot;,&quot;D&quot;)))&gt; listTwo&lt;-list(title=&quot;The Exam Results&quot;,listOne,x)&gt; listTwo$title[1] &quot;The Exam Results&quot;[[2]][[2]]$subjectNames[1] &quot;Math&quot; &quot;Reading&quot; &quot;History&quot; &quot;Physics&quot; &quot;Economics&quot;[[2]]$studentNames[1] &quot;John&quot; &quot;Peter&quot;[[3]] John Peter gradeJohn gradePeterMath 95 58 A BReading 80 32 B DHistory 60 65 D DPhysics 72 43 C DEconomics 84 49 B D&gt; listTwo[[2]]$subjectNames[1] &quot;Math&quot; &quot;Reading&quot; &quot;History&quot; &quot;Physics&quot; &quot;Economics&quot;$studentNames[1] &quot;John&quot; &quot;Peter&quot;&gt; listTwo[[2]]$subjectNames[1] &quot;Math&quot; &quot;Reading&quot; &quot;History&quot; &quot;Physics&quot; &quot;Economics&quot;&gt; listTwo$subjectNamesNULL 时间序列时间序列是特殊的矩阵或向量,由函数ts()创建,一元时间序列默认值 ts,多元时间序列默认值c(“mts”,”ts”) ,ts(data=NA,start=1,end=numeric(),frequency=1,deltat=1,ts.eps=getOption(&quot;ts.eps&quot;),class= ,names=) 123456789101112131415161718192021222324252627282930313233343536&gt; ts1&lt;-ts(1:10,2010,frequency=1)&gt; ts1Time Series:Start = 2010 End = 2019 Frequency = 1 [1] 1 2 3 4 5 6 7 8 9 10&gt; ts2&lt;-ts(1:36,frequency=12,start=c(2010,3))&gt; ts2 Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec2010 1 2 3 4 5 6 7 8 9 102011 11 12 13 14 15 16 17 18 19 20 21 222012 23 24 25 26 27 28 29 30 31 32 33 342013 35 36 &gt; ts3&lt;-ts(matrix(rnorm(24),8,3),start=c(2010,1),frequency = 4) #rnorm生成随机数&gt; ts3 Series 1 Series 2 Series 32010 Q1 -2.53265150 0.06600203 -0.95065402010 Q2 0.05894453 -0.84349820 -0.17655232010 Q3 -0.47160257 -1.52484881 0.32531432010 Q4 -0.68957525 0.12292570 0.42694422011 Q1 -2.47980475 0.59243573 -1.77352542011 Q2 -2.28164139 1.02340819 -0.71885062011 Q3 -1.14978250 -0.36354444 0.81437952011 Q4 0.20981269 0.37868089 -1.4009437&gt; ts3&lt;-ts(matrix(rnorm(24),8,3),start=c(2010,1),frequency = 4,names=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;))&gt; ts3 A B C2010 Q1 -0.734254773 0.03228792 -0.8399690642010 Q2 0.190277060 -0.37829225 0.8963526192010 Q3 0.007298513 0.10820272 -0.1407952782010 Q4 0.376817757 -1.10836939 -0.4294747692011 Q1 -1.099760283 0.64250578 0.0037840242011 Q2 -0.563540402 -0.69517193 -1.0731606252011 Q3 -0.899862468 -0.23836692 -0.8667856602011 Q4 -0.668345051 -0.49486593 0.167862363 数据载入 从外部获取数据123456789101112read.csv()read.csv(file,header=TRUE,sep=&quot;,&quot;,quote=&quot;\\&quot;,dec=&quot;.&quot;,fill=TRUE,comment.char=&quot;&quot;,...)#header首行是否为字段名,默认为TRUE,#sep字段的分隔符,默认为逗号#quote指定字段的分隔符#dec指定表示小数点的字符#fill文件中是否忽略了行尾的字段#comment.char表示注释符,默认为#,如果文件中没有注释,采用默认的 comment.char=&quot;&quot; 即可read.table()扩展包gdata中的read.xls()函数扩展包RODBC中的相关函数扩展包foreign中的相关函数 数据输出数据管理 访问数据123&gt; x&lt;-seq(1,100,2) #访问向量元素&gt; x[10][1] 19 字符串的处理12345678- 字符串连接: paste()函数,paste(...,sep='',collapse=NULL)(1) ...表示一个或多个R对象,paste()函数将对象首先处理成字符串,然后再相互组合(2)sep表示用于连接字符的自定义分隔符,例如空格、$、等等，默认为空格(3)collapse参数为可选项，指定collapse参数时，会按照该参数值在之前组合的字符串基础上，再通过collapse参数进行分割，形成单独的长字符串，而非向量。eg:&gt; x&lt;-paste(LETTERS[1:6],letters[1:6],sep=&quot;#&quot;,collapse = &quot;&amp;&quot;)&gt; x[1] &quot;A#a&amp;B#b&amp;C#c&amp;D#d&amp;E#e&amp;F#f&quot; 123456789101112131415161718192021222324- 字符串拆分 strsplit(x,spilt,fixed=FALSE,perl=FALSE,useBytes=FALSE)(1)x：字符串向量，strspilt()函数依次对向量中每个元素进行拆分。(2)spilt:指定处在拆分位置上的字符串，即在那个字符串处进行拆分，(3)fixed:用普通文本匹配还是用正则表达式进行匹配。默认正则匹配(4)perl:表示使用perl语言的正则表达式，默认FALSE(5)useBytes：表示是否按字节进行匹配，默认为FALSE,表示按照字符而不是字节进行匹配。strsplit()函数返回列表，unlist()函数将列表转换为字符串向量eg:&gt; year&lt;-c(&quot;1990-1995&quot;,&quot;1996-2000&quot;,&quot;2001-2005&quot;)&gt; splityear&lt;-strsplit(year,split=&quot;-&quot;)&gt; splityear[[1]][1] &quot;1990&quot; &quot;1995&quot;[[2]][1] &quot;1996&quot; &quot;2000&quot;[[3]][1] &quot;2001&quot; &quot;2005&quot;&gt; unlist(splityear)[1] &quot;1990&quot; &quot;1995&quot; &quot;1996&quot; &quot;2000&quot; &quot;2001&quot; &quot;2005&quot;&gt; 12345678boxplot绘制箱线图boxplot(x, ..., range = 1.5, width = NULL, varwidth = FALSE,notch = FALSE, outline = TRUE, names, plot = TRUE,border = par(&quot;fg&quot;), col = NULL, log = &quot;&quot;, pars = list(boxwex= 0.8, staplewex = 0.5, outwex = 0.5), horizontal = FALSE,add = FALSE, at = NULL)#参数x为要绘制的数据,range控制点线延伸的长度,默认值为上下四分位数只差的1.5倍,在触须延伸终点#绘制横截线,outline表示是否绘制异常值,horizontal控制是否以水平或垂直于坐标轴的方式绘制箱线图 12四分位数:异常值计算方法:大于上四分位数的1.5倍分散度的值,或小于下四分位数1.5倍分散度的值,对于1.5至3倍分散度的异常值,用空心圆点表示,对于超出分散度三倍的异常值作为极端异常值处理,用实心圆点表示 12345678910111213141516171819散点图：plot()函数绘制分组数据的散点图饼图：pie(x, labels = names(x), edges = 200, radius = 0.8,clockwise = FALSE, init.angle = if(clockwise) 90 else 0,density = NULL, angle = 45, col = NULL, border = NULL, lty =NULL, main = NULL, ...)（1）x为向量，其元素为非负的数值型数据，这些数据反映在饼图的对应面积上。（2）labels是表达式或者字符串，用以给数据添加标签。（3）edges用来控制饼图外圈的圆润程度。饼图是由多边形拟合而成的，edges数值越大，饼图的外圈看上去就越圆。（4）radius用来控制饼图的半径，如果给数据添加的标签很长，缩小饼图半径就能够将字符完整显示出来。（5）clockwise用来控制排列顺序，即顺时针或逆时针方向排列。（6）density用来控制阴影线的密度。（7）angle用以控制阴影线的斜率。（8）col是一个向量，用以填充被分割饼图的每一区域的颜色。（9）main控制图的标题。eg:pie(c(10,20,30,40),col=rainbow(4),labels=c(&quot;10%&quot;,&quot;20%&quot;,&quot;30%&quot;,&quot;40%&quot;),main=&quot;PIE CHART&quot;) 1234567891011121314151617181920柱状图：barplot(height, width = 1, space = NULL, names.arg =NULL, legend.text = NULL, beside = FALSE, horiz = FALSE,density = NULL, angle = 45, col = NULL, border = par(&quot;fg&quot;),main = NULL, sub = NULL, xlab = NULL, ylab = NULL, xlim= NULL, ylim = NULL, xpd = TRUE, log = &quot;&quot;, axes = TRUE,axisnames = TRUE, cex.axis = par(&quot;cex.axis&quot;), cex.names =par(&quot;cex.axis&quot;), inside = TRUE, plot = TRUE, axis.lty = 0,offset = 0, add = FALSE, args.legend = NULL, ...)（1）height是绘图所用到的数据，数据的大小差异体现在柱形的高度上面。如果想要对一组数据进行绘图，则数据以向量方式输入；如果想要对两组以上数据进行绘图，则数据以矩阵方式输入，矩阵每一行代表一组数据。（2）names.arg是图形中绘制于每个柱形下方的名称向量。如果该参数被忽略，则名称就显示为向量所带的名称属性或矩阵的名称列。（3）legend.text用以控制图例。（4）horiz控制柱形（条形）以垂直或水平方式放置。（5）beside控制不同组数据以垂直方式堆积或水平方式并列来进行展示。取FALSE（默认取值）时，不同组的数据以垂直方式堆积展示。 123456789101112131415161718192021222324252627直方图：hist(x, breaks = &quot;Sturges&quot;, freq = NULL, probability = !freq,include.lowest = TRUE, right = TRUE, density = NULL,angle = 45, col = NULL, border = NULL, main =paste(&quot;Histogram of&quot;, xname), xlim = range(breaks), ylim= NULL, xlab = xname, ylab, axes = TRUE, plot = TRUE,labels = FALSE, nclass = NULL, warn.unused = TRUE, ...)（1）x是数值型向量，即所需要绘制直方图的数据集。（2）breaks参数通过以下方式控制直方图的单元（cells）数量：a) 给出一个向量，从而确定直方图单元的区间断点（breakpoints）；b) 给出单个数值，从而确定直方图的单元数量；c) 给出计算区间的算法名称的字符串；d) 一个用于计算单元数量的函数。 （3）freq和probability均为逻辑判断式，且两者为互斥选项，freq=TRUE时做频率图，否则为概率密度图。当probability=TRUE时，所有矩形的面积之和为1。 （4）labels是逻辑值，当labels=TRUE时，将添加相应的数值到矩形单元的上方。 （5）density参数设置填充矩形条的阴影线（shading lines）的密度，度量单位是每英寸填充的线条数。缺省模式下不绘制阴影线。angle参数设定了阴影线的角度。 （6）col参数设定了填充矩形条内部的颜色，当density为正数时，阴影线的颜色由col指定。 （7）border参数设置矩形条边框的颜色，当border=FALSE或NA时，将不绘制边框。 （8）如果想要自己设定坐标，可以使用xaxt=&quot;n&quot;或yaxt=&quot;n&quot;不绘制坐标，然后使用低级绘图命令axis来自定义坐标。 时间序列建模步骤： 目前, 最常用的平稳序列拟合模型是自回归模型 (AR 模 型)、移动平均模型 (MA 模型) 和自回归移动平均模型 (ARMA 模型). 这三类模型都属于有限参数线性模型, arima.sim拟合函数：","link":"/2020/09/14/R%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"},{"title":"Ubuntu 安装记录","text":"本博文U盘启动方式为UEFI Ubuntu是当今世界最流行的Linux系统之一 桌面环境采用Gnome,界面美观，（也有KDE等） 丰富的软件源，完善的包管理 具备完整的社区支持,许多问题可以通过搜索引擎搜索到已解决的方案 是初入linux的最佳选择之一 下面我们进入主题. 可能出现的问题（解决方案）： 关闭快速存储 关闭快速启动 设置硬盘为AHCI，安装完成后再还原。一、为Ubuntu系统分配硬盘空间 目前市面上笔记本硬盘主要是以下两种， 12345671. 固态(SSD) 如果你的硬盘为单固态,且未使用容量小于50G,基本上无法满足双系统日常使用.推荐加下容量2.机械(HDD)As we all know,HDD的读写速度慢于SSD- 如果读者笔记本是SSD+HDD组合,且固态内存未使用容量小于50G，建议把Ubuntu系统安装在机械盘上 为Ubuntu系统划分硬盘空间(下为图示步骤) ​ 选择有足够空间的磁盘,右键点击新建压缩卷,然后点击确定即可。（如果不把Ubuntu作为主系统使用,70G容量基本够用,此处以100G为例.） 二、制作U盘启动工具磁盘空间分配完成后,下一步用软碟通制作U盘启动工具准备: 一个4G内存且已格式化的U盘（ubuntu20.04系统镜像为2G多，U盘容量需大于镜像文件大小） U盘制作工具, [UltraISO](https://www.ultraiso.com/download.html) ubuntu镜像文件，下载站见下： 123选择版本，本文以20.04为例，18.04同样适用 ，- [官网](https://cn.ubuntu.com/download)- [清华大学镜像站](https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/) 上述下载完成后，便可制作启动U盘,打开UltraISO选择试用即可（Continue to Try） 左键点击文件（File）,单击OPEN,找到ubuntu ISO文件打开 然后点击Bootable,单击Write Disk Image,开始写入镜像，大约需要等待七八分钟， 三、设置启动方式 插入已制作成功的U盘，重启电脑, 开机时，按F2进入Bios界面(品牌不同,快捷键不同,需自行百度)。 调整启动顺序,把USB 选项放在首位(即USB启动),保存重启。 建议在Bios界面关闭安全启动（Secure boot） 四，安装Ubuntu重启后，可看到GRUB引导界面,选择Install ubuntu. 选择语言为中文, 选择最小安装（速度快点 😁） 选择其他选项，自己创建 下面开始为Ubuntu分区，在分区之前，先简略介绍一下各分区的作用 12345678910111213141516171根分区 根分区就是root分区，所有的东西都在这个分区内2/swap分区 /swap分区是交换分区，划分比内存大2倍 保证在编译过程中资源不会耗尽,是一定磁盘空间（分区或文件），用于将部分内存中的数据换下来，以腾出内存空间用于其他需求。在一个系统中，物理内存快使用完时，操作系统会使用交换分区。当系统内存紧张时，操作系统根据一定的算法规则，将一部分最近没使用的内存页面保存到交换分区，从而为需要内存的程序留出足够的内存空间.3/boot分区 它包含了操作系统的内核和在启动系统过程中所要用到的文件4/usr分区 是Linux存放软件的地方5/home分区 是用户的home目录所在地，这个分区的大小取决于有多少用户，如果是多用户共同使用同一台电脑，这个分区是完全有必要的，况且根用户也可以很好的控制普通用户使用计算机，如对用户或者用户组实行硬盘限量使用，限制普通用户访问那些文件等。6/tmp分区 用来存放临时文件， 博主建议划分swap分区与根分区(/ )及home分区,swap分区大小设置为本机内存的两倍，然后把剩余区间全部划分给根目录与home目录（如果作为主力系统，home分区不建议小于50G） swap分区选则用于交换空间 根目录选择Ext4文件系统，挂载点选/不同文件系统区别自行百度。 最后等待漫长的安装过程（约20分钟），完成后,拔下U盘,重启即可进入GRUB引导界面,在下载软件之前，需在软件更新器中更换软件源。如果遇到什么问题可在下方留言，看到会回复。最最后，放一张博主美化好后的界面（仿MAC风格）,美化教程下篇见！","link":"/2020/10/28/Ubuntu%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"title":"博客加设coding平台记录","text":"起初博客放在github上,但是github有时访问不了(没买梯子emmm,改过hosts文件),后来转到了码云,(为什么转码云呢?因为码云快呀),但码云有点神经呀,绑定域名另外收费,我可以理解，但每次推送代码后都要我手动去执行下更新操作,我想不通.果断换coding coding现在騰訊旗下,部署个静态网站是真的麻烦,实名认证,绑定微信,绑定邮箱….一系列操作, 找静态部署费了好长时间,需要在团队管理处手动开启 绑定域名,需要用腾讯的CDN,意料之中,赠送了六个月的,每个月20G流量,对于我的小破站来说足够用了,不知道是只赠送六个月还是…,如果收费,俺就不绑定域名了. ssl证书,这个申请时间大约要四五天,之后添加解析记录. 其次问题就来了,浏览器提示证书无效,好吧,先把博客文件里的http换成https,再次推送,证书有效了,还是提示不安全,把仓库内容全删掉,再次推送,hexo clean 终于提示安全了. （最终，种种原因，我又换回GitHub了）","link":"/2020/10/16/blog%E8%AE%BEcoding%E5%B9%B3%E5%8F%B0/"},{"title":"deepin wine QQ汉字显示方块解决方案","text":"simsun字体(宋体)复制到 /usr/share/fonts/目录 1sudo mv simsun.ttf /usr/share/fonts/","link":"/2022/01/03/deepin%20wine%20QQ%E6%B1%89%E5%AD%97%E6%98%BE%E7%A4%BA%E6%96%B9%E5%9D%97%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"title":"deepin wine 微信启动失败解决记录","text":"从命令行启动微信，执行以下命令 12cd /opt/apps/com.qq.weixin.deepin/filessudo ./run.sh 查看启动信息，报错情况如下 12libGL error: No matching fbConfigs or visuals foundlibGL error: failed to load driver: swrast 缺少这个库，继续开启百度之路： 突然想到，上次安装Pytorch时，更换了ubuntu附加驱动为NVIDIA-470,接下来安装470相应的库， 重新启动微信，成功解决","link":"/2021/10/19/deepin%20wine%20%E5%BE%AE%E4%BF%A1%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/"},{"title":"Gitbash_乱码记","text":"更换电脑,重装hexo时,gitbash输出乱码. 系统字符集编码与Gitbash字符集编码不一致,解决方法打开win10语言设置,依次点击下图选项,更改为UTF-8编码,重启电脑即可解决.[吐了,其他软件又乱码了]","link":"/2020/09/14/gitbash-%E4%B9%B1%E7%A0%81%E8%AE%B0/"},{"title":"linux后台运行和关闭、查看后台任务","text":"在日常使用 Linux 的过程中，我们经常需要将任务放到后台运行，或者对多个并发任务进行管理。 一、使用 &amp;：命令后台运行在命令末尾加上 &amp;，可以让该命令在后台异步执行，终端不会被占用。例如： 1watch -n 10 sh test.sh &amp; 这个命令的意思是：每 10 秒执行一次 test.sh 脚本，并且在后台运行。 这种方式适合执行不需要交互、运行时间较长的任务。 ⚠️ 注意：当你关闭当前终端后，使用 &amp; 启动的任务通常会一并终止。 二、Ctrl + Z：挂起当前前台任务在执行一个前台任务时，按下 Ctrl + Z 可以将其挂起（暂停执行），并转为后台状态。 此时任务并未运行，而是处于“暂停”状态。你可以通过 jobs 查看它的编号，并结合 bg 或 fg 进行后续处理。 三、jobs：查看后台任务列表jobs 命令可以列出当前 shell 中所有的后台任务（包括暂停的和正在运行的）。 12jobsjobs -l # 显示每个任务对应的 PID 显示结果通常类似： 12[1]+ Running watch -n 10 sh test.sh &amp;[2]- Stopped python script.py 其中 + 表示默认任务，- 表示次要任务，编号（如 [1]）可用于 fg 和 bg。 四、fg：将后台任务调至前台执行使用 fg 命令可以把一个后台任务拉回前台继续运行。 1fg %1 # 将任务编号为 1 的任务恢复到前台 如果你只有一个后台任务，也可以直接用 fg 而不加参数。 五、bg：恢复后台暂停的任务如果某个任务被你 Ctrl + Z 暂停了，可以用 bg 命令让它在后台继续运行。 1bg %2 # 将任务编号为 2 的任务在后台继续执行 这时候任务不会回到前台，但会继续运行，不会阻塞终端。 六、kill：终止后台进程你可以通过两种方式终止后台任务： 方法一：使用 jobs 和 %jobnumber1kill %1 # 杀掉编号为 1 的后台任务 方法二：使用 ps 查看 PID 再杀掉12ps aux | grep test.shkill 12345 # 终止 PID 为 12345 的进程 如果你在前台执行某个任务，也可以直接按 Ctrl + C 来终止它。 七、nohup：让任务脱离终端独立运行当你希望某个任务在关闭终端之后仍能继续运行，可以使用 nohup 命令。 1nohup sh test.sh &amp; 输出默认会被写入到 nohup.out 文件中，即使关闭当前终端，该脚本依然会继续运行。 你可以通过以下命令确认进程是否仍在： 1ps aux | grep test.sh 这是生产环境中部署后台任务的常见做法，适合长期运行的服务或爬虫等任务。 八、前后台命令速查表 操作 命令或快捷键 说明 后台运行 command &amp; 命令直接后台执行 暂停并转后台 Ctrl + Z 暂停前台任务，任务进入后台暂停状态 查看后台任务 jobs / jobs -l 查看所有后台任务和其状态 后台任务转前台 fg %n 恢复后台任务到前台执行 恢复后台执行 bg %n 让后台任务继续在后台运行（取消暂停） 杀死任务 kill %n / kill PID 通过任务编号或 PID 终止进程 永久后台运行 nohup command &amp; 即使关闭终端也能继续运行任务 终止前台任务 Ctrl + C 强制终止正在执行的前台任务","link":"/2020/02/19/linux%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E5%92%8C%E5%85%B3%E9%97%AD%E3%80%81%E6%9F%A5%E7%9C%8B%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/"},{"title":"pyecharts库只能识别int类型的整型数据","text":"数据类型不匹配：pyecharts库只能识别int类型的整型数据。但是pandas结果数据一般是numpy.int类型，pyecharts无法识别，导致数值数据变成null。","link":"/2021/05/24/pyecharts%E5%BA%93%E5%8F%AA%E8%83%BD%E8%AF%86%E5%88%ABint%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B4%E5%9E%8B%E6%95%B0%E6%8D%AE/"},{"title":"Python 下划线","text":"单个前导下划线： 用于表示该变量是模块内部使用的，作为约定，告诉其他开发者这不是公共接口的一部分，不建议直接访问 123456class MyClass: def __init__(self): self.public_variable = 42 self._protected_variable = 'protected data'obj = MyClass()print(obj._protected_variable) # 输出： protected data 单个末尾下划线 避免与Python关键字或者内置函数名命名冲突时，可以使用单个末尾下划线来重命名变量,如class_可以避免与class冲突 class_ = 'test' print(class_) # 输出: test ------------------------------ class= 'test' File &quot;&lt;stdin&gt;&quot;, line 1 class= 'test' ^ SyntaxError: invalid syntax 双前导下划线 名称修饰，保护父类属性的访问，防止子类属性覆盖父类属性，访问方法obj._类名__属性名 123456789101112131415161718class Parent: def __init__(self): self.__x = 10 # 使用双前导下划线命名属性class Child(Parent): def __init__(self): super().__init__() self.__x = 20 # 子类定义相同名称的属性parent = Parent()child = Child()print(parent.__dict__) # 输出 {'_Parent__x': 10}print(child.__dict__) # 输出 {'_Parent__x': 10, '_Child__x': 20}print(parent._Parent__x) # 输出 10print(child._Child__x) # 输出 20 双前导和双末尾下划线 用于标识特殊方法（魔术方法）,如 __init__（构造方法）、__str__（字符串表示方法）。 预定义的特殊名称，如，__name__ 是一个包含当前模块名称的特殊变量。__file__ 包含当前模块的文件路径。 1234567891011class MyClass: def __init__(self): self.__count__ = 0 def __str__(self): return f&quot;MyClass instance with count: {self.__count__}&quot;if __name__ =='__main__': # 预定义的特殊名称 obj = MyClass() obj.__count__ = 5 # 使用末尾下划线的特殊变量 print(obj) # 输出 &quot;MyClass instance with count: 5&quot; 单个下划线： 用来表示无关紧要的变量 12for _ in range(5): print('test') 在交互式解释器中，_指向最后一次执行的表达式结果 1234+87+9_ # 输出16","link":"/2022/05/14/python-%E4%B8%8B%E5%88%92%E7%BA%BF/"},{"title":"Python 整数缓存机制","text":"首先在终端中输入python，打开解释器，输入以下测试代码： 1234&gt;&gt;&gt; number1 = 256&gt;&gt;&gt; number2 = 256&gt;&gt;&gt; number1 is number2True 1234&gt;&gt;&gt; number1 = 257&gt;&gt;&gt; number2 = 257&gt;&gt;&gt; number1 is number2False 在上述代码中，我们观察到不同的结果。这是由于 Python 的整数对象缓存机制。对于较小的整数（通常范围在 -5 到 256 之间），它们在解释器启动时会被预先创建，并且在整个程序执行期间会重用相同的对象。这意味着当我们使用相同的整数值创建变量时，它们实际上指向相同的对象，因此身份比较结果为 True。然而，对于较大的整数，缓存机制不适用，每次创建的对象都是独立的。 另外，在执行以下代码时，结果为 True。这是由于 Python 解释器的优化策略，它会预先创建并重用一些较大的整数对象，以减少内存消耗。因此，当我们使用相同的整数值创建变量时，它们可能会指向同一个对象，使得身份比较结果为 True。 1234&gt;&gt;&gt; number1 = 257&gt;&gt;&gt; number2 = 257&gt;&gt;&gt; number1 is number2True 然而，在使用 PyCharm 编辑器时，执行以下代码会返回 True。这是由于 PyCharm 编辑器可能对一些整数对象进行缓存或共享，以提高性能和减少内存消耗。这导致使用相同的整数值创建的多个变量指向相同的对象，使得身份比较结果为 True。 1234&gt;&gt;&gt; number1 = 25777777&gt;&gt;&gt; number2 = 25777777&gt;&gt;&gt; number1 is number2True 综上所述，整数对象的缓存机制和身份比较在 Python 中是一项优化策略，旨在提高性能和减少内存消耗。然而，其行为可能因解释器、环境和整数值的大小而有所不同。因此，在编写代码时，应尽量避免依赖整数对象的身份比较，而是使用相等性比较来判断整数值是否相等。","link":"/2022/10/28/python%E6%95%B4%E6%95%B0%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"},{"title":"Python爬虫 requests访问http网站之443报错（ssl验证）","text":"报错信息： 1urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='ssr4.scrape.center', port=443): Max retries exceeded with url: /page/1 (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1007)'))) SSL介绍： SSL（Secure Sockets Layer）验证是在建立HTTPS连接时进行的一种验证过程。SSL验证的目的是确保服务器的身份，并验证通信双方之间的信任关系。以下是SSL验证的基本过程： 客户端请求建立SSL连接：当客户端（通常是Web浏览器）向服务器发送HTTPS连接请求时，它将尝试与服务器建立SSL连接。 服务器发送数字证书：如果服务器支持SSL，它会将包含数字证书的响应发送给客户端。数字证书由经过可信认证的第三方机构（证书颁发机构）签发，并包含了服务器的公钥、服务器的身份信息以及其他相关信息。 客户端验证数字证书：客户端接收到服务器发送的数字证书后，会对证书进行验证。验证过程包括以下几个方面： a. 校验证书的签发机构：客户端会检查证书是否由被客户端信任的可信证书颁发机构签发。 b. 检查证书的有效期：客户端会验证证书是否在有效期内，即确认证书尚未过期。 c. 验证服务器域名：客户端会核对证书中的服务器域名与客户端请求的域名是否匹配。这可以防止中间人攻击等安全威胁。 d. 检查证书的撤销状态：客户端会查询证书撤销列表（CRL）或在线证书状态协议（OCSP）服务器，确认证书是否被吊销。 客户端生成会话密钥：一旦客户端验证通过，它会生成一个临时的会话密钥（也称为”对称密钥”或”会话密钥”），用于该SSL会话的后续加密和解密操作。 安全数据传输：客户端使用服务器的公钥对会话密钥进行加密，并将加密后的会话密钥发送给服务器。服务器使用自己的私钥解密接收到的会话密钥。之后，客户端和服务器之间的通信将使用该会话密钥进行对称加密和解密。 通过SSL验证过程，客户端可以验证服务器的身份，并确保与服务器之间建立了安全的通信通道。这种验证过程可以帮助防止中间人攻击、欺骗和数据篡改等安全威胁。同时，SSL验证还为用户提供了信任和可靠性，因为证书是由可信的第三方机构签发的，代表了服务器的身份和认证信息。使用requests.get(verify=False) 关闭ssl验证。urllib3.disable_warnings()禁用 urllib3 库中的 SSL 证书验证警告","link":"/2021/10/28/python%E7%88%AC%E8%99%AB%20requests%E8%AE%BF%E9%97%AEhttp%E7%BD%91%E7%AB%99%E4%B9%8B443%E6%8A%A5%E9%94%99%EF%BC%88ssl%E9%AA%8C%E8%AF%81%EF%BC%89/"},{"title":"会者定离，一期一祈。","text":"每一次相遇皆是缘分,可遇而不可求有些事错过了就是错过了.静下心来,仔细回顾,终是我不够勇敢,过于求稳,倘若我坚定一点,很多事情应该可以做得更好,至少不会像现在一般遗憾吧.已往之不谏,来者仍可追!感谢遇见!","link":"/2020/04/08/%E4%BC%9A%E8%80%85%E5%AE%9A%E7%A6%BB%EF%BC%8C%E4%B8%80%E6%9C%9F%E4%B8%80%E7%A5%88/"},{"title":"协同过滤","text":"协同过滤算法是一种常见的推荐系统算法，核心思想是利用用户历史行为数据，通过计算相似度,来找到与目标用户或目标商品喜好相似的商品。 基于用户的协同过滤算法：它通过分析用户间的相似性来进行个性化推荐。具体来说，如果用户A和用户B在评分或点赞行为上表现出高度的一致性，那么系统会推断出用户B可能对用户A喜欢的物品感兴趣。这种方法的核心在于，通过挖掘用户间的相似偏好，来预测并推荐那些用户可能喜欢但尚未接触的物品。 为了实现这一目标，首先需要构建一个用户-物品评分矩阵。这个矩阵以用户为行、物品为列，矩阵中的每个元素代表相应用户对相应物品的评分。接下来，算法会计算矩阵中用户向量之间的相似度，这可以通过多种方法完成，如余弦相似度、杰卡德系数、欧式距离、汉明距离或皮尔逊相关系数等。 通过比较这些相似度指标，算法可以识别出与用户A最相似的N个用户,标志为用户群体T(A，N)，并且将T中A未交互过的物品提取出来，对于每个物品item计算它的加权平均值，选择制值最高的K个物品作为A的推荐项。 例如，如果用户A和用户B都对某一系列电影给出了高评分，但用户A还对另一部未被用户B观看过的电影给出了高分，那么基于他们的相似偏好，这部未被用户B观看过的电影就有可能被推荐给用户B。 基于物品的协同过滤算法：如果用户U喜欢物品A，而物品A和物品B有很高的相似性，那么用户U也有可能很喜欢物品B。 为了实现这一目标，首先需要建立用户–物品表，记录每个用户最近点击交互过的物品列表，以及每个物品的喜好程度，根据时间倒排列，取前n个物品 物品–物品表：记录每个物品与其相似的物品列表及相似度，根据相似度倒排列，取前k个相似物品。","link":"/2021/04/10/%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4/"},{"title":"在jupyter里面使用conda创建的虚拟环境","text":"提要 conda常用的命令。 conda list 查看安装了哪些包。 conda env list 或 conda info -e 查看当前存在哪些虚拟环境 conda update conda 检查更新当前conda 创建Python虚拟环境。 使用 conda create -n your_env_name python=X.X（2.7、3.6等） anaconda 命令创建python版本为X.X、名字为your_env_name的虚拟环境。your_env_name文件可以在Anaconda安装目录envs文件下找到。 指定python版本为2.7，注意至少需要指定python版本或者要安装的包# 后一种情况下，自动安装最新python版本 conda create -n env_name python=2.7 同时安装必要的包 conda create -n env_name numpy matplotlib python=2.73. 使用激活(或切换不同python版本)的虚拟环境。 打开命令行输入python –version可以检查当前python的版本。 使用如下命令即可 激活你的虚拟环境(即将python的版本改变)。 Linux: conda activate your_env_name(虚拟环境名称) 对虚拟环境中安装额外的包。 使用命令conda activate your_env_name 激活你的虚拟环境 使用命令conda install [package] 即可安装package到your_env_name中 关闭虚拟环境(即从当前环境退出返回使用PATH环境中的默认python版本)。使用如下命令即可。conda deactivate env_name，也可以使用activate root切回root环境 删除虚拟环境。移除环境使用命令conda remove -n your_env_name(虚拟环境名称) –all， 即可删除。删除环境中的某个包。使用命令conda remove –name your_env_name $package_name 即可。 jupyter使用conda创建的虚拟环境 安装 jupyter kernelconda activate your_env_nameconda install ipykernel 安装一个插件让jupyter notebook可以运行于指定的conda虚拟环境。conda install nb_conda_kernels 连接虚拟环境到jupyter kernel python -m ipykernel install –user –name [环境名] 删除虚拟环境 jupyter kernelspec remove your_env_name 完成！","link":"/0202/05/23/%E5%9C%A8jupyter%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8conda%E5%88%9B%E5%BB%BA%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"},{"title":"关键词提取算法","text":"关键词是揭示文档核心主题的最小语义单元，对于理解文本内容至关重要。关键词自动抽取技术致力于自动识别和提取这些具有高度意义和代表性的词汇或短语，实现了自动化的关键词识别过程。在文本挖掘领域，这一技术被称为关键词抽取（Keyword Extraction），而在信息检索领域，它通常被称作自动标引（Automatic Indexing）。关键词提取作为文献检索、自动摘要、文本分类、推荐系统等多个领域的关键任务，为这些应用提供了基础性的支持。 在传统的中文文本处理领域，目前主要采用以下三种算法进行关键词提取： TF/IDF算法：评估词汇在文档中的重要性与其在语料库中的常见程度的反比。 TextRank算法：一种基于图的排序算法，通过文档内部的词汇相互作用来确定关键词的重要性。 LDA算法：一种主题模型，它假设文档是从隐含主题的混合中生成的，通过这种方式抽取具有代表性的关键词。 TF/IDF算法预处理：首先，需要对文档进行分词，将文本分解为单个词汇，并去除那些常见但对主题贡献不大的词汇，比如“的、吗、首先、然后”等停用词。这是为了减少噪音，确保算法专注于那些具有实际意义的词汇。 词频（TF）计算：接下来统计每个词在文章中出现的频率，即该词出现次数除以文档的总词数。这个比例反映了词在文档中的重要性，但不能反映词汇的独特性或在整个语料库中的分布情况。 逆文档频率（IDF）计算：逆文档频率用来衡量词汇的罕见程度，通过对语料库中包含该词文档的数量取倒数并进行对数变换来计算，公式为 IDF = log(语料库的文档总数 / 包含该词的文档数 + 1)。这样做是为了提升那些在少数文档中出现但给出大量信息的词的重要性。 计算TFIDF值：最后将每个词的TF值乘以其IDF值得到TF/IDF值。这个值越高，词在文档中的重要性越大。 TextRank算法TextRank算法是一个基于图的排名算法，广泛应用于关键词提取和文本摘要任务中。其核心思想是利用文本内部词语之间的共现关系来评估每个词语的重要性。在这个过程中，每个词语被视为图中的一个节点，而词语之间的共现关系则形成节点间的连接边。 预处理阶段首先，对文档进行预处理，包括分词和去除停用词。分词是将文本分解为单独的词汇单元，而去除停用词（如“的”、“吗”、“然后”等）旨在消除那些虽频繁出现但对理解文档主题贡献较小的词汇。这一步骤帮助减少图中的节点数量，确保算法能更有效地聚焦于那些具有实际意义的词汇。 构建图接下来，构建一个图，其中的节点代表文档中的词语或短语，边代表它们之间的共现关系。这里的“共现”指的是两个或多个词汇在文本中一定窗口大小范围内同时出现的情况，而边的权重通常反映了共现的频次。通过这种方式，图形象地表示了文本中词语的相互关联和相对重要性。 在构建图的过程中，统计共现情况是关键步骤之一。这一步骤通常遵循以下流程： 窗口大小：首先，确定一个“窗口大小”，即在文本中同时考虑的连续词汇的数量。这个大小可以根据任务和文本的特点调整。较小的窗口强调更紧密的词语关系，而较大的窗口可以捕捉更广泛的上下文关系。 遍历文本：然后，遍历处理后的文本（已分词且去除了停用词），在每个窗口内记录所有词汇对的共现。例如，如果窗口大小为4，那么窗口中的每个词都与其他三个词形成共现关系。 构建图：对于每个共现关系，如果图中还不存在这两个词语对应的节点，则创建这些节点；如果这两个节点之间还没有边，则添加一条边，并将边的权重设为1。如果这两个节点之间已经有一条边，则将该边的权重增加1。 迭代计算与权重确定通过类似PageRank算法的迭代计算过程，每个节点（词或短语）的权重根据其邻接节点的重要性进行动态调整，直至整个系统达到平衡（收敛）。这个过程模拟了一个网络中的“推荐”机制，即一个词的重要性部分由与之相关的其他词的重要性决定。 关键词与摘要的提取最终，根据节点的权重对它们进行排序，权重越高的词语被认为在文档中的重要性越大。通过选择排名靠前的词语，我们可以确定文档的关键词或生成文本摘要。 类比说明可以将TextRank算法比作社交网络中的人际关系网。在这个网络中，每个人（节点）通过与其他人的互动（边）建立起连接。一个人的影响力（节点权重）不仅取决于他们直接认识的人数，还受到他们朋友的社交地位影响。这个类比有助于理解TextRank如何通过分析词语间的相互作用来评估它们的重要性，进而抽取关键信息。 LDA算法LDA（潜在狄利克雷分配，Latent Dirichlet Allocation）是一种常用于文本分析的主题模型，通过分析文档中词语的分布来推断出潜在的主题结构。LDA理想的文档不应过于短暂，以避免词汇过于稀疏，影响主题发现的质量。 初始化选择K个你希望从文档中发现的主题数量，每个文档被认为是这些主题的一个混合体，其中每个主题被定义为词汇的概率分布。通过狄利克雷分布为每个主题随机生成一个词的概率分布。 随机分配对于文档中的每个词，随机分配一个主题，作为该词的初始主题标签，然后开始吉布斯采样，不断更新文档中每个词的主题分配，在每次迭代中，算法会为文档中的每个词重新评估其属于各个主题的条件概率。 对每个文档中的每个词： 临时移除该词的当前主题分配。 根据当前模型的状态，计算该词被分配到每个主题的条件概率。这一步利用了以下公式，其中包含两个因素： 文档中其他词的当前主题分配。 全部文档中，当前主题下其他词的分配。 条件概率公式： 具体地，每个词w被分配到主题k的条件概率是基于： $p(topic_k∣document_d)$ 主题k在文档d中的分布。 $p(word_w∣topic_k)$：词w在主题k中的分布。 更新主题分配： 根据计算出的条件概率，为该词选择一个新的主题，并更新模型状态。 迭代直至收敛： 这个过程重复执行，直到每个词的主题分配变化不大，模型达到了稳定状态。 收敛重复迭代过程，直到每个词的主题分配稳定下来，这时算法结束。最终，我们得到每个文档的主题分布，以及每个主题的词分布。从每个主题的词分布中选出N个概率最高的词作为关键词。","link":"/2022/04/08/%E5%85%B3%E9%94%AE%E8%AF%8D%E6%8F%90%E5%8F%96%E7%AE%97%E6%B3%95/"},{"title":"端午，年中总结","text":"在新年的曙光下，我们应当怀揣着勇气、坚定与理智，以迎接未来的每一个挑战。当直觉悄然示意我们需要行动时，须勇于跨越内心的犹豫，果断迈出那关键的一步，因为错失良机可能是一种无法挽回的遗憾。 待人以真诚的心，展现出那无畏的魄力，如同一轮明月般，在黑夜中独自闪耀，照亮前行的道路。同时，在思维的海洋中追求着广阔与深邃，如同勇敢的水手驾驭着船只穿越波涛汹涌的大海，寻找着彼岸的那一抹光芒。承担责任，展现出无畏的领导力，就像古老的山峰屹立于苍穹之下，无论风雨如何肆虐，都能坚守自己的位置。正如古人所言：“海纳百川，有容乃大；壁立千仞，无欲则刚。”这句千古名言蕴含着深刻的哲理，启迪着我们应以包容与坚韧的态度来迎接未来的考验。在这新的一年里，让我们怀揣着宽广的胸怀和坚定的信念，面对每一个崭新的黎明，将心中的希望和梦想如阳光般洒满人生的旅途，绽放出更加灿烂的光芒。 暑气逼人，年中将近，翻起年初写的flag。 更加勇敢、坚定、理智；不能过多的犹豫，果断迈出关键的一步，机会错过了就难以挽回。 拥有魄力，努力担当，积极面对挑战并且全力以赴去解决问题。拥有领导力，提高情商、社交技能以及对他人情感和需求的理解。。待人真诚，被人依赖。 提高思考的深度和广度。 成为一个明媚、温暖的人，培培养乐观思维模式，关注生活中的积极面，养积极的心态和情感表达，做到事事有回应。 学会组局，在人际关系中形成良好的互动：组局涉及到多种社交技巧，如主动沟通，使用开放式问题引导对话，展现真实的兴趣和关心。融入集体，建立入局群体归属感。倾听他人，理解和回应对方的情感和观点，使用反馈和确认技巧，如复述和点头，展示对对方的重视和尊重。营造氛围，减轻紧张和压力。情绪管理、冲突管理等基本技能,同时还需具备较强的人际敏感性、同理心和亲和力,以敏锐地洞察他人情绪、需求和期望,做出恰当反应,增进相互理解。在照顾他人需求的同时,也要平衡各方诉求,具备协调能力,做出合理的取舍。需要尊重每个人的独特性,创造平等机会,发挥每个人的主观能动性。有效提升领导力，更有效地组织和管理团队。 保持开放的性格特质，乐于探索新事物，持有好奇心：有助于提高认知复杂度,从多元视角理解事物的丰富性,避免简单化判断，拓宽视野，营造良好的心理体验。保持冷静，调节好情绪，有助于应对各种挑战。不随意对他人进行评判，保持同理心，建立良好的人际关系。 警惕生活中平庸的恶：对日常生活中的细枝末节漠不关心，这些微小的事物似乎不值一提、无伤大雅，但如果习以为常，就会造成善良淡化，同情心削弱，逐渐陷入麻木。","link":"/2024/06/10/%E7%AB%AF%E5%8D%88%EF%BC%8C%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/"},{"title":"常用设计模式","text":"软件设计的六大原则SOLID： 单一职责：一个类应该只负责一个方面的任务，如果一个类承担了过多的任务，修改其中一部分可能会影响到其它类的功能。 ​ 开闭原则：对修改关闭，对扩展开放，类、模块、函数等应该可以在已有代码不被修改的情况下增添新功能。 依赖倒置：鼓励创建抽象类或接口，通过依赖注入的方式，让具体实现类依赖于这些抽象类 接口隔离：将大的接口分成更小更具体的接口，让类只需要关心他们真正需要的接口。 里氏替换：子类对象应该能够替换其父类对象，而不破坏程序的正确性。换句话说，这意味着子类应当遵循父类的行为约定，父类定义的行为在子类中依然成立。 组合优于继承：可以通过包含其它对象来扩展类的行为，通过对象的组合来获得更灵活的代码重用机制，避免继承带来的紧密耦合问题。 常用的设计模式： 工厂模式：旨在将对象的创建过程从其使用过程中分离出来，以提高系统的灵活性和可维护性。在这种模式下，客户端代码不直接实例化具体产品类。相反，它通过使用一个共同的工厂接口，依赖于工厂类来创建具体产品的实例。这种方式允许客户端代码在不知道具体产品类细节的情况下工作，从而使系统更容易扩展和维护。举一个类比，这就像在餐厅点餐时，你不需要知道食物是如何准备的，你只需要从菜单中选择你想要的食物，并等待厨房准备好送到你的桌上。 123456789101112131415161718192021222324252627282930313233343536class Chart: def draw(self): raise NotImplementedError(&quot;This method should be overridden by subclasses.&quot;)class ScatterChart(Chart): def draw(self): return &quot;Drawing ScatterChart.&quot;class LineChart(Chart): def draw(self): return &quot;Drawing LineChart.&quot;class BarChart(Chart): def draw(self): return &quot;Drawing BarChart.&quot;class ChartFactory: def create_chart(self, data_type, data_size, user_preference): if data_type == 'continuous': if data_size &gt; 1000: return ScatterChart() else: return LineChart() elif data_type == 'categorical': if user_preference == 'detail': return BarChart() else: return LineChart() # Add more logic as needed else: raise ValueError(&quot;Unsupported data type or preferences&quot;)# Client codefactory = ChartFactory()chart = factory.create_chart('continuous', 1200, None)print(chart.draw()) 策略模式：是一种行为模式，它主要关注对象的行为和算法的选择。这个模式允许开发者定义一系列的算法，把它们封装在独立的策略类中，并在运行时确定使用哪一个算法。这样，这种模式使得客户端可以在不同算法间切换，而无需关心算法的具体实现细节。客户端的选择通常基于运行时的条件或者需求变更，而策略模式使得这种选择变得灵活和可扩展。 123456789101112131415161718192021222324252627282930313233343536373839from abc import ABC, abstractmethod# 定义策略接口class RenderStrategy(ABC): @abstractmethod def render(self, text): pass# 实现文本渲染策略class TextRenderStrategy(RenderStrategy): def render(self, text): return text# 实现Markdown渲染策略class MarkdownRenderStrategy(RenderStrategy): def render(self, text): return f&quot;**{text}**&quot; # 假设简单地将文本加粗表示Markdown渲染# 上下文，用于使用策略class ContentRenderer: def __init__(self, strategy: RenderStrategy): self.strategy = strategy def render(self, text): return self.strategy.render(text)# 在运行时根据条件选择策略if __name__ == &quot;__main__&quot;: # 假设这是根据用户输入或其他条件动态决定的 user_preference = &quot;markdown&quot; if user_preference == &quot;text&quot;: strategy = TextRenderStrategy() elif user_preference == &quot;markdown&quot;: strategy = MarkdownRenderStrategy() renderer = ContentRenderer(strategy) print(renderer.render(&quot;Hello, Strategy Pattern!&quot;)) 观察者模式：是一种行为模式，允许观察者对象监听某个被观察者对象的状态变化，当被观察者对象的状态发生变化时，它会自动通知所有注册的观察者，触发他们执行相应的更新操作。这种模式特别是用于创建松耦合的系统。我不清楚上述过程中观察者是如何注册的，并且被观察者如何通知的观察者？ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899class Observer: def update(self, news): &quot;&quot;&quot;接收新闻更新的方法。 该方法应当由继承自Observer类的所有子类实现，以便当新闻发布者有新闻更新时，能够通知所有订阅者。 Args: news: 一个字符串，表示接收到的新闻内容。 &quot;&quot;&quot; passclass EmailSubscriber(Observer): def update(self, news): &quot;&quot;&quot;当新闻更新时，通过电子邮件通知订阅者。 实现Observer类中的update方法，以电子邮件形式接收新闻。 Args: news: 一个字符串，表示接收到的新闻内容。 &quot;&quot;&quot; print(f&quot;Email Subscriber received news: {news}&quot;)class SMSSubscriber(Observer): def update(self, news): &quot;&quot;&quot;当新闻更新时，通过短信通知订阅者。 实现Observer类中的update方法，以短信形式接收新闻。 Args: news: 一个字符串，表示接收到的新闻内容。 &quot;&quot;&quot; print(f&quot;SMS Subscriber received news: {news}&quot;)class NewsPublisher: def __init__(self): &quot;&quot;&quot;初始化新闻发布者。 创建一个新的新闻发布者实例，该实例可以注册和注销观察者，同时发布新闻给所有注册的观察者。 &quot;&quot;&quot; self.__subscribers = [] self.__latestNews = None def register(self, subscriber): &quot;&quot;&quot;注册一个新的观察者以接收新闻更新。 Args: subscriber: 一个Observer类的实例，表示要注册的观察者。 &quot;&quot;&quot; if subscriber not in self.__subscribers: self.__subscribers.append(subscriber) def unregister(self, subscriber): &quot;&quot;&quot;注销一个观察者，使其不再接收新闻更新。 Args: subscriber: 一个Observer类的实例，表示要注销的观察者。 &quot;&quot;&quot; self.__subscribers.remove(subscriber) def notifySubscribers(self): &quot;&quot;&quot;通知所有注册的观察者最新的新闻。 遍历所有注册的观察者，并调用它们的update方法，传递最新的新闻内容。 &quot;&quot;&quot; for subscriber in self.__subscribers: subscriber.update(self.__latestNews) def addNews(self, news): &quot;&quot;&quot;添加新闻并通知所有注册的观察者。 设置最新的新闻内容，并自动调用notifySubscribers方法通知所有观察者。 Args: news: 一个字符串，表示要发布的新闻内容。 &quot;&quot;&quot; self.__latestNews = news self.notifySubscribers()if __name__ == &quot;__main__&quot;: # 创建被观察者 news_publisher = NewsPublisher() # 创建观察者 email_subscriber = EmailSubscriber() sms_subscriber = SMSSubscriber() # 注册观察者 news_publisher.register(email_subscriber) news_publisher.register(sms_subscriber) # 添加一条新闻，自动通知所有观察者 news_publisher.addNews(&quot;New Python Version Released!&quot;) # 注销一个观察者 news_publisher.unregister(email_subscriber) # 添加另一条新闻，只有注册的观察者会收到通知 news_publisher.addNews(&quot;New Java Version Released!&quot;) 单例模式是一种确保类在任何给定时间内只有一个实例的设计模式，并提供一个全局访问点来获取该实例。 1234567891011121314151617181920212223242526272829303132import threadingclass SingletonClass: _instance = None _lock = threading.Lock() def __new__(cls, *args, **kwargs): with cls._lock: if not cls._instance: cls._instance=super(SingletonClass, cls).__new__(cls, *args, **kwargs) return cls._instancefrom functools import wrapsdef singleton(cls): instances = {} lock = threading.Lock() @wraps(cls) def wrapper(*args, **kwargs): if cls not in instances: with lock: if cls not in instances: instances[cls] = cls(*args, **kwargs) return instances[cls] return wrapper","link":"/2020/09/14/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"title":"新服务器运行django站点","text":"远程登录服务器 1234sudo ssh root@user_name#删除 原来的ssh密钥命令ssh-keygen -f &quot;/home/shimmer/.ssh/known_hosts&quot; -R &quot;117.72.9.46&quot; 延长服务器ssh超时自动断开时间,此处为30分钟 12345#默认情况下，SSH 配置文件位于 /etc/ssh/sshd_config。ClientAliveInterval 1800ClientAliveCountMax 3#设置完成后，保存文件并重新启动 SSH 服务器：sudo service ssh restart 建议安装FTP软件代替scp命令,本处使用FileZilla 首先更新服务器的软件 123#用户为root用户apt updateapt upgrade 升级python版本,安装pip 12apt install python3apt install python3-pip 我的服务器上，上一步的环境没解决好，有问题，pip不能切换，使用conda创建虚拟环境 下载 Miniconda 安装脚本： 在终端中执行以下命令，从 Miniconda 的官方网站下载适用于你的操作系统的安装脚本。你可以选择适用于 Python 3.x 的版本。 1wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 运行安装脚本： 在终端中执行以下命令，运行下载的安装脚本（请注意，文件名可能会因下载的版本而有所不同）： 1bash Miniconda3-latest-Linux-x86_64.sh 按照安装向导完成安装： 按照安装向导的提示进行安装。ctrl + c跳过解释，通常情况下，选择默认选项即可。 启动一个新的终端窗口： 安装完成后，你需要启动一个新的终端窗口，以使新的 Conda 环境变量生效。 测试 Conda 安装： 在终端中运行以下命令，检查 Conda 是否正确安装： 1conda --version 如果显示了 Conda 的版本信息，则表示安装成功。 现在，你可以使用 Conda 创建虚拟环境、安装软件包等。使用以下命令来创建一个名为 “myenv” 的虚拟环境： 1conda create -n myenv python=3.8 然后激活这个环境： 1conda activate myenv 在激活的环境中，你可以使用 Conda 安装所需的软件包，管理依赖项等。当你完成项目后，可以使用以下命令退出虚拟环境： 1conda deactivate 安装requirements.txt库 123pip install -r requirements.txt#注意安装mysqlclient时需要先安装mysqlclient的开发库apt-get install libmysqlclient-dev 上传并解压文件（推荐上传压缩包替代文件夹）， 1unzip MyBlog.zip pip换国内源 123456mkdir ~/.pipnano ~/.pip/pip.conf--------------------------#pip.conf文件输入以下内容，换为清华源[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple 安装数据库，此处为MySql 1apt install mysql-server 为mysql root用户设置密码 登录到 MySQL 服务器： 打开终端并使用以下命令登录到 MySQL 服务器。你将需要输入安装过程中设置的 MySQL root 用户密码。 1mysql -u root -p 如果成功登录，你将进入 MySQL 命令行界面。 设置 root 用户密码： 在 MySQL 命令行中，使用以下命令来设置 root 用户的密码。将 new_password 替换为你想要设置的实际密码。 1ALTER USER 'root'@'localhost' IDENTIFIED WITH 'mysql_native_password' BY 'new_password'; 替换 'new_password' 为你要设置的实际密码。 刷新权限： 在设置密码后，需要刷新权限以确保更改生效。 1FLUSH PRIVILEGES; 退出 MySQL 命令行： 输入以下命令退出 MySQL 命令行界面。 1exit 运行django程序 mysql建立相应的数据库 使用迁移命令建立相应的表 12python3 manage.py makemigrationspython3 manage.py migrate 开启防火墙 1234#在配置nginx前，开启防火墙，不然下次可能无法通过ssh访问服务器apt install ufw ufw enableufw allow 22/tcp 安装nginx 1apt install nginx 配置nginx文件 1nano /etc/nginx/sites-available/default 1234567891011121314151617181920server { charset utf-8; listen 80; server_name 117.72.9.46.; location /static { alias /MyBlog/static; } location /media { alias /MyBlog/media; } location / { proxy_set_header Host $host; proxy_pass http://unix:/tmp/117.72.9.46.socket; }} 1service nginx reload apt换源 备份当前sources.list文件: 1cp /etc/apt/sources.list /etc/apt/sources.list.bak 编辑sources.list文件: 1nano /etc/apt/sources.list 注释掉原有的源,加入新的软件源: 1234deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse 收集静态文件 12# 静态文件收集目录STATIC_ROOT = os.path.join(BASE_DIR, 'static') 1python3 manage.py collectstatic 运行gunicorn 1gunicorn --bind unix:/tmp/117.72.9.46.socket MyBlog.wsgi:application gunicorn –bind unix:/tmp/117.72.9.46.socket –log-file /logfile.log MyBlog.wsgi:application 使用nginx获取真实ip 123456789101112#如果你使用了Nginx作为反向代理服务器，并且在Nginx配置中有一些代理相关的设置，那么在Django中通过#self.request.META.get('REMOTE_ADDR')获取到的IP地址可能会不准确，甚至为空。这是因为Nginx会将用户的真实IP地址放在特定的#HTTP头中，而不是直接传递给Django。#在这种情况下，你可以通过访问特定的HTTP头来获取用户的真实IP地址。默认情况下，Nginx将用户的真实IP地址存储在X-Real-IP头中。以下##是如何在Django中获取用户真实IP地址的示例代码：user_ip = self.request.META.get('HTTP_X_REAL_IP') # 获取真实IP地址if user_ip: url = f&quot;http://ip-api.com/json/{user_ip}?lang=zh-CN&quot; response = requests.get(url) data = response.json() print(&quot;国家:&quot;, data['country']) location_info = data['country'] 当然你也可以不安装nginx、gunicorn等服务，直接部署项目 开启防火墙，配置服务器防火墙规则： 确保服务器的防火墙允许来自外部网络的连接到达你选择的Django运行端口 123456#查看防火墙状态ufw status#开启django运行的端口ufw allow 8000/tcp#重新加载防火墙规则ufw reload 2.启动Django应用： 12#切记运行接口是（0.0.0.0），而不仅仅是本地接口127.0.0.1python manage.py runserver 0.0.0.0:8000 3.访问django程序 1浏览器访问 公网IP:8000","link":"/2023/08/19/%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8Cdjango%E7%AB%99%E7%82%B9/"},{"title":"小白的nginx指南","text":"Nginx 是一个高性能的开源web和反向代理服务器，也可以用作电子邮件（IMAP/POP3）代理服务器。它的主要特点包括占用资源少、并发性高、可扩展性强以及对高负载环境的稳定性。 高性能： 事件驱动：Nginx 使用事件驱动架构，能够高效地处理大量并发连接，而不会消耗过多的内存或CPU资源。 非阻塞：Nginx 是非阻塞式的，允许它同时处理多个请求，而不会等待一个请求完成后再处理下一个。 低资源消耗： 内存效率：Nginx 的内存占用非常低，适合在有限的硬件资源上运行。 CPU效率：由于事件驱动和非阻塞特性，Nginx 使用 CPU 的效率非常高，即使在高负载下也能保持稳定。 高并发性： Nginx 可以同时处理成千上万个并发连接，这对于高流量和高并发的网站非常重要。 反向代理： 1234567891011121314151617181920反向代理服务器（Reverse Proxy Server）是一种位于网络服务器和客户端之间的中间服务器，是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。与正向代理服务器不同，反向代理服务器的作用是隐藏真实的后端服务器，使客户端不直接与后端服务器通信。客户端是不知道真正的目标服务器是谁的，甚至不知道自己访问的是一个代理。 正向代理服务器（Forward Proxy Server）是一种位于客户端和目标服务器之间的中间服务器，其主要作用是代表客户端向目标服务器发送请求，并将获得的内容返回给客户端。客户端通过正向代理服务器来访问互联网上的资源，而不是直接连接目标服务器。正向代理服务器在客户端和目标服务器之间充当了中介的角色，隐藏了客户端的真实IP地址和身份。应用场景：访问受限资源：正向代理服务器可以用于绕过网络访问限制。例如，如果某些网站被屏蔽或受到地理位置限制，用户可以通过连接到位于允许访问的国家/地区的正向代理服务器来访问这些资源。保护客户端隐私：正向代理服务器可以隐藏客户端的真实IP地址，增强了用户的隐私和匿名性。内容过滤和安全性：正向代理服务器可以用于过滤恶意流量、病毒、广告和有害内容，提高安全性。提高性能：正向代理服务器可以缓存常用资源，减少对目标服务器的请求，从而提高性能。VPN服务：正向代理服务器通常用于构建虚拟私人网络（VPN）。用户可以通过连接到VPN服务器来获得安全的、匿名的互联网访问，并访问受限资源。企业内部网络：在企业内部，正向代理服务器通常用于管理内部网络的访问控制和安全性，允许员工安全地访问互联网资源。正向代理与反向代理的区别简单来讲：正向代理需要在客户端做配置，服务器不需要做任何配置。反向代理需要在服务器做配置，客户端不需要做任何配置。 Nginx 可以作为反向代理服务器，将客户端的请求转发到后端服务器，实现负载平衡和高可用性。这对于分散负载和提供冗余非常有用。 负载均衡： Nginx 可以分发请求到多个后端服务器，确保它们平均分担负载，提高系统的性能和可用性。这对于处理大量流量的网站非常重要。 静态文件服务： Nginx 能够快速地提供静态文件（如HTML、CSS、JavaScript和图像），这减轻了后端服务器的负载，提高了网站的响应速度。 反向代理缓存： Nginx 可以缓存一些静态或动态内容，以减少对后端服务器的请求，提高性能。这对于频繁请求相同内容的网站非常有用。 以下是在Ubuntu上管理Nginx的一些常用命令： 启动Nginx： 1sudo systemctl start nginx 停止Nginx： 1sudo systemctl stop nginx 重启Nginx： 1sudo systemctl restart nginx 重新加载Nginx配置（不中断已经处理的连接）： 1sudo systemctl reload nginx 检查Nginx配置文件的语法是否正确： 1sudo nginx -t 查看Nginx的状态： 1sudo systemctl status nginx 启用Nginx开机自启动： 1sudo systemctl enable nginx 禁用Nginx开机自启动： 1sudo systemctl disable nginx 查看Nginx版本号： 1nginx -v 打开Nginx的主配置文件（默认是/etc/nginx/nginx.conf）： 1sudo nano /etc/nginx/nginx.conf 查看Nginx配置文件所在目录： 1nginx -V 查看Nginx正在监听的端口和虚拟主机配置： 1sudo nginx -T","link":"/2022/09/06/%E9%80%9A%E4%BF%97%E8%A7%A3%E9%87%8Anginx/"},{"title":"English words","text":"format: 版式,格式action: 动作,活动interaction: 互动,交互动作abstraction: 抽象instance: 实例 interface: 界面/接口dependency: 依赖generalization: 泛化association: 关联aggregation: 聚合composition: 组合implementation: 实现analysis: 分析activity diagram: 活动图attribute: 属性basic flow: 基本流程component diagram: 组件图 plot (绘制,标出) assign(分配,指定) script(脚本,手迹) apropos(适当的,恰好的) manuals(手册) reference(参考,引文) attributes(属性) variables(变量) vector(向量) numeric(数字的) sequence(序列,顺序) generic(一般的,通用的) respective(各自的) Linear regression model (线性回归模型) dimensions(维度) components(分量) chr:数值表达式 replicate: 复制 重复 concatenate: 把…联系起来 quantile: 分位数 median: 中值 中位数 sieve: 筛子 滤网 不能守密的人copy: 中文 英文 中文 英文 抽象 Abstraction 实例 Instance 动作、活动 Action 互动、交互作用 Interaction 动作流、任务流程管理 Action Flow 接口 Interface 活跃的、主动的 Active 界面 Interface 活动 Activity 不变量、不变的 Invariant 活动图 Activity Diagram 生命线 Lifeline 行为者 Actor 连结 Link 聚合 Aggregation 逻辑视图 Logical View 其它流程 Alternative Flow 消息 Message 分析 Analysis 方法 Method 分析模式 Analysis Pattern (AP) 模型 Model 应用框架 Application Framework (AF) 多样性 Multiplicity 架构样式 Architectural Pattern 导航 Navigation 关连 Association 嵌套的状态 Nested State 属性 Attribute 节点 Node 基本流程 Basic Flow 注意、强调、说明 Note 行为 Behavior 对象 Object 边界 Boundary 对象约束语言 Object Constraint Language 呼叫、访问 Call 对象图 Object Diagram 类 Class 面向对象 Object Oriented 类别图 Class Diagram 操作 Operation 合作 Collaboration 重载 Overloading 合作图 Collaboration Diagram 覆盖、重写 Overriding 通讯 Communicate 包 Package 组件 Component 参数 Parameter 组件图 Component Diagram 被动、消极的 Passive 组件框架 Component Framework (CF) 模式 Pattern 组件式开发 Component-Based Development 多态 Polymorphism 组合、组成 Composition 后续条件 Post-Condition 具体 Concrete 前置条件 Pre-Condition 限制、约束 Constraint 进程视图 Process View 构建 Construction 特性、性质 Property 构造方法、构造器 Constructor 限定、指定限制 Qualifier 控制 Control 关系 Relationship 建立 Creation 需求 Requirement 数据类型 Data type 返回 Return 相依 Dependency 角色 Role 部署图 Deployment Diagram 情节、使用场景（用例图） Scenario 部署视图 Deployment View 顺序图、时序图 Sequence Diagram 设计 Design 方法规格 Signature 设计模式 Design Pattern (DP) 状态 State 摧毁 Destruction 状态机 State Machine 破坏、析构 Destructor 状态转移图 State Transition Diagram 鉴别器 Discriminator 静态 Static 动态 Dynamic 套用老套，使一成不变 Stereotype 封装 Encapsulation 结构 Structure 实体 Entity 子系统 Subsystem 事件 Event 泳道、区隔线 Swimlane 扩展 Extend 标注值、标记值 Tagged Value 外观、门面 Facade 模板 Template 结束状态 Final State 测试 Test 事件流程 Flow Of Event 追溯 Trace 控制焦点、焦点 Focus of Control 转移 Transition 框架 Framework 类型 Type 框架 Framework 统一模塑语言。UML Unified Modeling Language 监视、守卫 Guard 使用 Use 实现 Implementation 用例 Use Case 实现视图 Implementation View 使用个案图 Use Case Diagram 包含 Include 使用个案观点 Use-Case View 基础框架 Infrastructure Framework (IF) 视图 View 继承 Inheritance 虚拟 Virtual 初始状态 Initial State 可见性 Visibility","link":"/2021/04/08/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"},{"title":"面向对象与面向过程","text":"-面向对象(Object Oriented Programming):在面向对象编程中，我们将问题划分为一组相互关联的对象，每个对象都有自己的属性和方法。通过定义这些对象和它们之间的关系，我们可以使用对象的组合、继承和多态性等特性来解决问题。对象的属性描述了对象的特征，方法定义了对象的行为。通过对象之间的交互和消息传递，我们可以实现问题的解决方案。 理解面向对象编程（OOP）涉及掌握这种编程范式的核心概念和原则。 以下是帮助理解 OOP 的一些步骤： 学习基础知识：首先了解 OOP 的基本概念，例如对象、类、属性、方法和封装。 对象是类的实例，类定义了创建对象的蓝图。 属性表示对象的数据或状态，而方法定义对象可以执行的行为或操作。 理解封装：封装是指将数据和方法捆绑在一个对象内，并限制对对象内部细节的直接访问。 它有助于实现数据隐藏、抽象和维护对象状态的完整性。 了解如何定义类、创建对象以及访问其属性和方法。 探索继承：继承允许一个类从另一个类继承属性和方法。 这个概念促进了代码重用和分层组织。 了解如何创建父（基）类和子（派生）类，并了解超类、子类和继承层次结构的概念。 掌握多态性：多态性使得不同类的对象能够被视为公共超类的对象。 它允许不同的对象以不同的方式响应同一个方法调用。 了解方法重写和方法重载的概念，它们是实现多态性的关键方面。 练习设计和实现 OOP 解决方案：开展涉及使用 OOP 原则设计和实现解决方案的小型项目或练习。 练习创建类、定义其属性和方法、建立对象之间的关系以及在适当的情况下应用继承和多态性。 学习OOP设计模式：探索OOP中常用的设计模式，例如单例模式、工厂模式、观察者模式等等。 了解这些设计模式将为您提供解决 OOP 中重复出现的设计问题的实用见解。 分析现有的OOP代码库：研究和分析现有的OOP代码库，例如开源项目，看看OOP原理如何应用在现实场景中。 检查对象是如何设计的，它们如何相互交互，以及如何利用封装、继承和多态性。 考虑一个图书馆的场景，我们可以定义两个对象：图书馆（Library）和图书（Book）。 首先，我们定义一个图书对象（Book）的类，它具有属性（如书名、作者、出版年份）和方法（如借书、还书）： 1234567891011121314151617181920class Book: def __init__(self, title, author, year): self.title = title self.author = author self.year = year self.borrowed = False def borrow(self): if self.borrowed: print(&quot;This book is already borrowed.&quot;) else: self.borrowed = True print(&quot;Book borrowed successfully:&quot;, self.title) def return_book(self): if not self.borrowed: print(&quot;This book is not borrowed.&quot;) else: self.borrowed = False print(&quot;Book returned successfully:&quot;, self.title) 接下来，我们定义图书馆对象（Library）的类，它包含了图书馆的属性（如名称、地址）和方法（如添加书籍、借书、还书）： 1234567891011121314151617181920212223class Library: def __init__(self, name, address): self.name = name self.address = address self.books = [] def add_book(self, book): self.books.append(book) print(&quot;Book added successfully:&quot;, book.title) def borrow_book(self, book_title): for book in self.books: if book.title == book_title: book.borrow() return print(&quot;Book not found:&quot;, book_title) def return_book(self, book_title): for book in self.books: if book.title == book_title: book.return_book() return print(&quot;Book not found:&quot;, book_title) 现在，我们可以创建图书馆对象和图书对象，并进行相应的操作： 1234567891011121314151617181920# Create library objectlibrary = Library(&quot;City Library&quot;, &quot;123 Main Street&quot;)# Create book objectsbook1 = Book(&quot;Python Beginner's Guide&quot;, &quot;John Smith&quot;, 2019)book2 = Book(&quot;Java Programming Practice&quot;, &quot;Jane Doe&quot;, 2020)# Add books to the librarylibrary.add_book(book1)library.add_book(book2)# Borrow bookslibrary.borrow_book(&quot;Python Beginner's Guide&quot;)library.borrow_book(&quot;Java Programming Practice&quot;)library.borrow_book(&quot;C++ Basics&quot;) # Book not found# Return bookslibrary.return_book(&quot;Python Beginner's Guide&quot;)library.return_book(&quot;Java Programming Practice&quot;)library.return_book(&quot;C++ Basics&quot;) # Book not found 在这个例子中，我们首先定义了Book类和Library类，分别表示图书和图书馆。每个图书对象都有自己的属性（如书名、作者、出版年份）和方法（如借书、还书）。图书馆对象维护了一组图书，并提供了添加图书、借书和还书的方法。 我们通过创建图书馆对象library和图书对象book1和book2，并使用图书馆对象的方法来模拟图书馆的借书和还书过程。在借书和还书的过程中，我们可以看到相应的提示信息被打印出来，表示操作的成功与否。 -面向过程(Procedural Programming)：在面向过程编程中，我们将问题分解成一系列详细的步骤，然后通过函数实现每个步骤，并按照特定的顺序依次调用这些函数来解决问题。每个函数负责完成特定的任务，函数之间通过参数传递数据或返回值进行通信。面向过程编程强调程序的步骤和算法，以顺序执行的方式解决问题，不涉及对象的概念。 在面向过程编程中，问题的解决方法通常以过程或函数为中心，而不是以对象为中心。在这个图书馆的例子中，我们可以使用面向过程的方式来实现相同的功能。 12345678910111213141516171819202122232425262728293031323334353637383940414243books = [] # 存储图书的列表def add_book(title, author, year): book = {&quot;title&quot;: title, &quot;author&quot;: author, &quot;year&quot;: year, &quot;borrowed&quot;: False} books.append(book) print(&quot;Book added successfully:&quot;, title)def borrow_book(title): for book in books: if book[&quot;title&quot;] == title: if book[&quot;borrowed&quot;]: print(&quot;This book is already borrowed.&quot;) else: book[&quot;borrowed&quot;] = True print(&quot;Book borrowed successfully:&quot;, title) return print(&quot;Book not found:&quot;, title)def return_book(title): for book in books: if book[&quot;title&quot;] == title: if not book[&quot;borrowed&quot;]: print(&quot;This book is not borrowed.&quot;) else: book[&quot;borrowed&quot;] = False print(&quot;Book returned successfully:&quot;, title) return print(&quot;Book not found:&quot;, title)# Add books to the libraryadd_book(&quot;Python Beginner's Guide&quot;, &quot;John Smith&quot;, 2019)add_book(&quot;Java Programming Practice&quot;, &quot;Jane Doe&quot;, 2020)# Borrow booksborrow_book(&quot;Python Beginner's Guide&quot;)borrow_book(&quot;Java Programming Practice&quot;)borrow_book(&quot;C++ Basics&quot;) # Book not found# Return booksreturn_book(&quot;Python Beginner's Guide&quot;)return_book(&quot;Java Programming Practice&quot;)return_book(&quot;C++ Basics&quot;) # Book not found 在这个面向过程的实现中，我们不再使用类和对象，而是使用了一组全局变量和函数来处理图书馆的操作。图书被表示为字典，每本图书有自己的属性（如书名、作者、出版年份）和状态（是否被借出）。books列表用于存储所有图书的信息。 函数add_book用于添加图书，它创建一个包含图书信息的字典，并将其添加到books列表中。函数borrow_book用于借书，它遍历books列表，查找要借的图书并更新其借阅状态。函数return_book用于还书，它遍历books列表，查找要还的图书并更新其借阅状态。 通过这种面向过程的方式，我们仍然可以实现相同的功能，但是代码结构和组织方式与面向对象编程有所不同。面向过程更注重问题的步骤和操作的组织，而不是将问题划分为对象并通过对象的交互来解决问题。","link":"/2020/06/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"title":"驾校一点通抢课脚本","text":"软件: autojs 12345678910111213141516171819202122232425262728293031323334353637383940414243444546//判断屏幕锁定，解锁屏幕（数字密码）if (!device.isScreenOn()) { //从息屏状态 将屏幕唤醒 device.wakeUp();//唤醒设备 console.log('亮屏'); sleep(1000); // 等待屏幕亮起 //miui锁屏滑动不能唤出密码输入 通过下拉通知栏点击时间进入密码解锁 swipe(500, 0, 500, 2120, 900); //点击“时间” click(180, 180); sleep(1000); console.log('开始解锁'); //解锁 密码 0000 desc(0).findOne().click(); desc(0).findOne().click(); desc(0).findOne().click(); desc(0).findOne().click(); //等待解锁完成，返回并退出 back(); }sleep(1000);launch('com.jxedt');while(!textContains('我的').exists()){ //等待启动完成};toast('驾校一点通已打开');//消息提示log('驾校一点通已打开');//消息提示click('驾校');sleep(3000);click('我要约课');sleep(3000);click(666,666); //点击教练sleep(3000);while(true){ var myDate = new Date(); console.log(myDate.getMinutes()); if(myDate.getMinutes()==1 || textContains('查看约课记录').exists()){ exit();} //退出循环 时间或约课成功 click(460,300); //刷新 sleep(10); click(550,1200); //点击教练 sleep(10); click(900,1950); //预约 sleep(10);}","link":"/2020/10/28/%E9%A9%BE%E6%A0%A1%E4%B8%80%E7%82%B9%E9%80%9A%E6%8A%A2%E8%AF%BE%E8%84%9A%E6%9C%AC%20/"}],"tags":[{"name":"VMware16","slug":"VMware16","link":"/tags/VMware16/"},{"name":"scala","slug":"scala","link":"/tags/scala/"},{"name":"spark","slug":"spark","link":"/tags/spark/"},{"name":"Centos7","slug":"Centos7","link":"/tags/Centos7/"},{"name":"Hadoop","slug":"Hadoop","link":"/tags/Hadoop/"},{"name":"Zookeeper","slug":"Zookeeper","link":"/tags/Zookeeper/"},{"name":"Hbase","slug":"Hbase","link":"/tags/Hbase/"},{"name":"Hive","slug":"Hive","link":"/tags/Hive/"},{"name":"flume","slug":"flume","link":"/tags/flume/"},{"name":"kafaka","slug":"kafaka","link":"/tags/kafaka/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"English","slug":"English","link":"/tags/English/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Google开发者模式","slug":"Google开发者模式","link":"/tags/Google%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F/"},{"name":"Linux命令杂记","slug":"Linux命令杂记","link":"/tags/Linux%E5%91%BD%E4%BB%A4%E6%9D%82%E8%AE%B0/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"心理学","slug":"心理学","link":"/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"SQL","slug":"SQL","link":"/tags/SQL/"},{"name":"R","slug":"R","link":"/tags/R/"},{"name":"coding","slug":"coding","link":"/tags/coding/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Python爬虫","slug":"Python爬虫","link":"/tags/Python%E7%88%AC%E8%99%AB/"},{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"},{"name":"编程","slug":"编程","link":"/tags/%E7%BC%96%E7%A8%8B/"}],"categories":[{"name":"Hadoop","slug":"Hadoop","link":"/categories/Hadoop/"},{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"},{"name":"笔记","slug":"笔记","link":"/categories/%E7%AC%94%E8%AE%B0/"},{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"问题杂记","slug":"问题杂记","link":"/categories/%E9%97%AE%E9%A2%98%E6%9D%82%E8%AE%B0/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"数据库","slug":"数据库","link":"/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"auto.js","slug":"auto-js","link":"/categories/auto-js/"}]}